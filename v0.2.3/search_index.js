var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.System(L, d, df, sp, gas)","category":"page"},{"location":"functions/#GasChromatographySimulator.System-NTuple{5, Any}","page":"Functions","title":"GasChromatographySimulator.System","text":"System(L, d, df, sp, gas)\n\nConstruct the structure Systems with given values for the case of constant diameter d and film thickness df. \n\nArguments\n\nL: Length of the capillary measured in m (meter).\nd: Diameter of the capillary measured in m (meter). \nd_f: Film thickness of the capillary measured in m (meter).\nsp: The name of the stationary phase.\ngas: The name of the mobile phase. Allowed values: He, H2 or N2.\n\nExamples\n\njulia julia> System(10.0, 0.1e-3, 0.1e-6, \"DB5\", \"He\")\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Program(time_steps::Array{<:Real, 1}, temp_steps::Array{<:Real, 1}, pin_steps::Array{<:Real, 1}, pout_steps::Array{<:Real, 1}, a_gf::Array{<:Real, 2}, Tcontrol, L)","category":"page"},{"location":"functions/#GasChromatographySimulator.Program-Tuple{Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Matrix{<:Real}, Any, Any}","page":"Functions","title":"GasChromatographySimulator.Program","text":"Program(time_steps, temp_steps, pin_steps, pout_steps, a_gf, Tcontrol, L)\n\nConstruct the structure Program with given values. \n\nArguments\n\ntime_steps: Time steps in s (seconds). \ntemp_steps: Temperature steps in °C (degree celsius).\npin_steps: Inlet pressure steps in Pa(a) (pascal, absolute).\npout_steps: Outlet pressure steps in Pa(a) (pascal, absolute).\na_gf: Parameters of the gradient function.\nTcontrol: Option defining at which point of the column the temperature\n\nprogram is calculated. The options are inlet (x=0) and outlet (x=L).\n\nL: Length of the capillary measured in m (meter).\n\nThe length of the arrays time_steps, temp_steps, pin_steps, pout_steps and a_gf have to be the same.\n\nThe arguments Tcontrol and L are used to construct the thermal gradient function gf(x) and the temperature interpolation T_itp(x,t).\n\nExamples\n\njulia> Program([0.0, 60.0, 300.0, 120.0],\n        [40.0, 40.0, 320.0, 320.0],\n        300000.0.*ones(4),\n        zeros(4),\n        [[20.0, 20.0, 20.0, 20.0] zeros(4) 10.0.*ones(4) [0.0, -2.0, -5.0, -5.0]],\n        \"inlet\",\n        10.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Program","category":"page"},{"location":"functions/#GasChromatographySimulator.Program","page":"Functions","title":"GasChromatographySimulator.Program","text":"Program(time_steps, temp_steps, pin_steps, pout_steps, gf, a_gf, T_itp, pin_itp, pout_itp)\n\nStructure to describe the temperature and pressure program of a GC system. The function gf describes an optional thermal gradient.\n\nArguments\n\ntime_steps: Time steps in s (seconds). \ntemp_steps: Temperature steps in °C (degree celsius).\npin_steps: Inlet pressure steps in Pa(a) (pascal, absolute).\npout_steps: Outlet pressure steps in Pa(a) (pascal, absolute).\ngf: Gradient function gf(x, a_gf), describes the thermal gradient.\na_gf: Parameters of the gradient function.\nT_itp: Interpolated (linear) temperature T(x,t), constructed from time_steps, temp_steps and gf.\npin_itp: Interpolated (linear) inlet pressure pin(t), constructed from time_steps and pin_steps.\npout_itp: Interpolated (linear) outlet pressure pout(t), constructed from time_steps and pout_steps.  \n\nNote: The length of the arrays time_steps, temp_steps, pin_steps and a_gf have to be the same.\n\n\n\n\n\n","category":"type"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Substance","category":"page"},{"location":"functions/#GasChromatographySimulator.Substance","page":"Functions","title":"GasChromatographySimulator.Substance","text":"Substance(name, CAS, Tchar, θchar, ΔCp, φ₀, ann, Dag, t₀, τ₀)\n\nStructure to describe the properties of a solute, which migrates through the GC system. These datas are in most cases read from a database with the function load_solute_database().\n\nArguments\n\nname: Name of the solute. \nCAS: CAS number of the solute.\nTchar: Characterisic temperature (in K). One of the three distribution-centric thermodynamic parameters describing the retention of this solute on the given stationary phase.\nθchar: Characterisic parameters (in °C). One of the three distribution-centric thermodynamic parameters describing the retention of this solute on the given stationary phase.\nΔCp: Change of the isobaric heat capacity moving from the mobile to the stationary phase (in J mol⁻¹ K⁻¹). One of the three distribution-centric thermodynamic parameters describing the retention of this solute on the given stationary phase.\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the thermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\nann: Annotations. In most cases the source of the data is noted here.\nDag: The diffusitivity of the solute a in the mobile phase g (in...). It is calculated by the function diffusitivity().\nt₀: Initial time of the solute (in s) at the start of the simulation.\nτ₀: Initial peak width of the solute (in s) at the start of the simulation. \n\nSee also: load_solute_database\n\n\n\n\n\n","category":"type"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Options","category":"page"},{"location":"functions/#GasChromatographySimulator.Options","page":"Functions","title":"GasChromatographySimulator.Options","text":"Options(alg, abstol, reltol, Tcontrol, odesys, ng)\n\nStructure describing some general options for the simulation. \n\nArguments\n\nalg: The algorithm used for the ODE solver. The algorithms OwrenZen3(), OwrenZen4() and OwrenZen5() are recommended.\nabstol: The absolute tolerance for the ODE solver. Recommended value 1e-6 to 1e-8.\nreltol: The relative tolerance for the ODE solver. Recommended value 1e-3 to 1e-5. \nTcontrol: Option defining at which point of the column the temperature program is calculated. The options are inlet (x=0) and outlet (x=L).\nodesys: Combine the ODEs for migration and peak-width into a system of ODEs (odesys = true) or solve the two ODEs separately (odesys = false).\nng: Option to calculate the simulation without a gradient (ng = true) or with a gradient (ng = false). This distinction is made because of partly manuall differentiation (problem of automatic differentiation with integrals, e.g. in the flow_restriction() function. -> TODO: test package Quadrature.jl as alternative to QuadGK.jl for integration)\n\nTODO: add option for the retention model ('ABC', 'K-centric')\n\nFor more informations about the arguments alg, abstol and reltol see the documentation of the DifferentialEquations.jl package.\n\n\n\n\n\n","category":"type"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Parameters","category":"page"},{"location":"functions/#GasChromatographySimulator.Parameters","page":"Functions","title":"GasChromatographySimulator.Parameters","text":"Parameters(sys, prog, sub, opt)\n\nStructure describing all parameters for the simulation of a GC system. \n\nArguments\n\nsys: Structure Systems describing the parameters of the GC column and   mobile phase gas.\nprog: Structure Program describing the temperature and pressure   program of a GC system.\nsub: An array of the structure Substance describing the parameters of   the solutes which are separated in the GC simulation. \nopt: Structure Options describing additional option parameters.\n\n\n\n\n\n","category":"type"},{"location":"functions/#Helper","page":"Functions","title":"Helper","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.temperature_interpolation","category":"page"},{"location":"functions/#GasChromatographySimulator.temperature_interpolation","page":"Functions","title":"GasChromatographySimulator.temperature_interpolation","text":"temperature_interpolation(time_steps, temp_steps, gradient_function, L)\n\nConstruct the temperature function depending on position x and time t.  \n\nArguments\n\ntime_steps::Array{<:Real,1}: Time steps in s (seconds). \ntemp_steps::Array{<:Real,1}: Temperature steps in °C (degree celsius).\ngf::Function: Gradient function gf(x, a_gf), describes the thermal gradient.\nL::Float64: Length of the capillary measured in m (meter).\n\nFor the spatial dependency of the interpolated temperature T_ipt(x,t) the gradient function gf is calculated every 1e-3 m (1 mm). Positions inbetween are linear interpolated. For the temporal dependency the temperatures temp_steps defined at the time_steps are linear interpolated over time t.   \n\nExamples\n\njulia> T_itp = temperature_interpolation([0.0, 60.0, 300.0, 120.0], [40.0, 40.0, 320.0, 320.0], gf, 10.0)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.pressure_interpolation","category":"page"},{"location":"functions/#GasChromatographySimulator.pressure_interpolation","page":"Functions","title":"GasChromatographySimulator.pressure_interpolation","text":"pressure_interpolation(time_steps, press_steps)\n\nConstruct the pressure function depending on time t.  \n\nArguments\n\ntime_steps::Array{<:Real,1}: Time steps in s (seconds). \npress_steps::Array{<:Real,1}: Pressure steps in Pa (Pascal).\n\nThe pressure between the time_steps is linear interpolated between the corresponding values of press_steps  \n\nExamples\n\njulia> pin_itp = pressure_interpolation([0.0, 60.0, 300.0, 120.0], \n                                    [300000.0, 300000.0, 400000.0, 400000.0])\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.load_solute_database","category":"page"},{"location":"functions/#GasChromatographySimulator.load_solute_database","page":"Functions","title":"GasChromatographySimulator.load_solute_database","text":"load_solute_database(db, sp, gas, solutes, t₀, τ₀)\n\nLoad the data of solutes for the stationary phase sp and the mobile phase gas from the database db into an array of the structure Substance.\n\nArguments\n\ndb::DataFrame: DataFrame of the database. \nsp::String: Name of the stationary phase.\ngas::String: Name of the mobile phase.\nsolutes::Array{<:AbstractString,1}: Name of the solutes.\nt₀::Array{Float64,1}: Initial start times of the solutes.\nτ₀::Array{Float64,1}: Initial peak widths of the solutes. \n\nExamples\n\njulia> sub = load_solute_database(db, \"DB5\", \"He\", [\"C10\", \"C11\"], [0.0, 0.0], [0.5, 0.5])\n\n\n\n\n\nload_solute_database(db_path, db, sp, gas, solutes, t₀, τ₀)\n\nLoad the data of solutes for the stationary phase sp and the mobile phase gas from the database file db (located in db_path) into an array of the structure Substance. \n\nArguments\n\ndb_path::String: Path to the database file.\ndb::String: Name of the database file. \nsp::String: Name of the stationary phase.\ngas::String: Name of the mobile phase.\nsolutes::Array{<:AbstractString,1}: Name of the solutes.\nt₀::Array{Float64,1}: Initial start times of the solutes.\nτ₀::Array{Float64,1}: Initial peak widths of the solutes. \n\nExamples\n\njulia> sub = load_solute_database(\"path/to/the/file\", \"db.csv\", \"DB5\", \"He\", [\"C10\", \"C11\"], [0.0, 0.0], [0.5, 0.5])\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.all_solutes","category":"page"},{"location":"functions/#GasChromatographySimulator.all_solutes","page":"Functions","title":"GasChromatographySimulator.all_solutes","text":"all_solutes(sp, db)\n\nExtract the name of all solutes for which data in a database db and the stationay phase sp is available. \n\nArguments\n\nsp: Name of the stationary phase.\ndb: DataFrame of the database.\n\nExamples\n\njulia> all = all_solutes(\"DB5\", db)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.diffusivity","category":"page"},{"location":"functions/#GasChromatographySimulator.diffusivity","page":"Functions","title":"GasChromatographySimulator.diffusivity","text":"diffusivity(M, Cn, Hn, On, Nn, Rn, gas)\n\nCalculate the diffusivity Dag of solute a in gas g using the emperical Fuller-Schettler-Giddings model [1].\n\n[1] Fuller, Edward N.; Ensley, Keith; Giddings, J. Calvin, Diffusion of Halogenated Hydrocarbons in Helium. The Effect of Structure on Collision Cross Sections, The Journal of Physical Chemistry, Volume 73, Issue 11, 1969, 3679–3685\n\nArguments\n\nM: Molar mass of the solute.\nCn: Number of carbon atoms of the solute.\nHn: Number of hydrogen atoms of the solute.\nOn: Number of oxygen atoms of the solute.\nNn: Number of nitrogen atoms of the solute.\nRn: Number of closed rings of the structure of the solute.\ngas: The name of the mobile phase. Allowed values: He, H2 or N2.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Physical-Model","page":"Functions","title":"Physical Model","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.pressure","category":"page"},{"location":"functions/#GasChromatographySimulator.pressure","page":"Functions","title":"GasChromatographySimulator.pressure","text":"pressure(x, t, T_itp, pin_itp, pout_itp, L, d, gas; ng=false)\n\nCalculate the pressure at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m. Can be a function of position x.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)\n\nor with a gradient (ng = false, eq. 1).\n\np(xt) = sqrt(p_in(t)^2-fracκ(xt)κ_L(t)left(p_in^2-p_out^2right)) Eq. 1\n\np(xt) = sqrt(p_in(t)^2-fracxLleft(p_in^2-p_out^2right)) Eq. 2\n\nwith κ(xt) the flow restriction up to position x at time t and κ_L(t) = κ(x=Lt) the flow restriction of the whole column at time t.\n\nSee also: flow_restriction\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.flow_restriction","category":"page"},{"location":"functions/#GasChromatographySimulator.flow_restriction","page":"Functions","title":"GasChromatographySimulator.flow_restriction","text":"flow_restriction(x, t, T_itp, d, gas; ng=false)\n\nCalculate the flow restriction κ up to position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nd: Diameter of the GC column, in m. Can be a function of position x.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)\n\nor with a gradient (ng = false, eq. 1).\n\nκ(xt) = int_0^x fracη(yt) T(yt)d(y)^4dy Eq. 1\n\nκ(xt) = fracη(t) T(t) xd^4 Eq. 2\n\nwith η(xt) the viscosity of the mobile phase gas.\n\nSee also: viscosity\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.viscosity","category":"page"},{"location":"functions/#GasChromatographySimulator.viscosity","page":"Functions","title":"GasChromatographySimulator.viscosity","text":"viscosity(x, t, T_itp, gas)\n\nCalculate the (dynamic) viscosity of the mobile phase gas at position x at time t in Pa s.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\ngas: Name of the mobile phase gas.\n\nη(xt) = η_stleft(fracT(xt)T_stright)^(ξ_0 + ξ_1 fracT(xt)-T_stT_st) \n\nwith η_st, ξ_0 and ξ_1 parameters dependent on the mobile phase gas [1].\n\n[1] Blumberg, Leonid M., Temperature-Programmed Gas Chromatography, Wiley-VCH, 2010.\n\n\n\n\n\nviscosity(T, gas)\n\nCalculate the (dynamic) viscosity of the mobile phase gas at temperature T in Pa s.\n\nArguments\n\nT: Temperature in K.\ngas: Name of the mobile phase gas.\n\nη(xt) = η_stleft(fracT)T_st ight)^(ξ_0 + ξ_1 fracT-T_stT_st) \n\nwith η_st, ξ_0 and ξ_1 parameters dependent on the mobile phase gas [1].\n\n[1] Blumberg, Leonid M., Temperature-Programmed Gas Chromatography, Wiley-VCH, 2010.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.holdup_time","category":"page"},{"location":"functions/#GasChromatographySimulator.holdup_time","page":"Functions","title":"GasChromatographySimulator.holdup_time","text":"holdup_time(T, pin, pout, L, d, gas)\n\nCalculate the hold-up time in s without a gradient.\n\nArguments\n\nT: Temperature in K.\npin: Inlet pressure in Pa(a).\npout: Outlet pressure in Pa(g).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\n\nt_M = frac1283fracL^2d^2ηfracp_in^3-p_out^3(p_in^2-p_out^2)^2\n\n\n\n\n\nholdup_time(t, T_itp, pin_itp, pout_itp, L, d, gas; ng=false)\n\nCalculate the hold-up time in s at time t with a gradient.\n\nArguments\n\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)\n\nor with a gradient (ng = false, eq. 1).\n\nt_M(t) = 64fracκ_L(t)p_in(t)^2-p_out(t)^2 int_0^L d(y)^2fracp(yt)T(yt)dy Eq. 1\n\nt_M(t) = frac1283fracL^2d^2η(t)fracp_in(t)^3-p_out(t)^3(p_in(t)^2-p_out(t)^2)^2 Eq. 2\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.flow","category":"page"},{"location":"functions/#GasChromatographySimulator.flow","page":"Functions","title":"GasChromatographySimulator.flow","text":"flow(T, pin, pout, L, d, gas)\n\nCalculate the normalized flow through the GC column in m³/s without a gradient.\n\nArguments\n\nT: Temperature in K.\npin: Inlet pressure in Pa(a).\npout: Outlet pressure in Pa(g).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\n\nF = fracπ256fracT_np_nfracd^4Lfracp_in^2-p_out^2η T\n\nwith T_n the normalized temperature (T_n=(25 + 27315)K), p_n the normalized pressure (p_n = 101300 Pa(a)) and η the viscosity the mobile phase gas at temperature T.\n\n\n\n\n\nflow(t, T_itp, pin_itp, pout_itp, L, d, gas; ng=false)\n\nCalculate the normalized flow through the GC column in m³/s at time t.\n\nArguments\n\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)\n\nor with a gradient (ng = false, eq. 1).\n\nF(t) = fracπ256fracT_np_nfracp_in(t)^2-p_out(t)^2κ_L(t) Eq. 1\n\nF(t) = fracπ256fracT_np_nfracd^4Lfracp_in(t)^2-p_out(t)^2η(t) T(t) Eq. 2\n\nwith T_n the normalized temperature (T_n=(25 + 27315)K), p_n the normalized pressure (p_n = 101300 Pa(a)), κ_L the flow restriction of the column and η the viscosity the mobile phase gas at temperature T.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.mobile_phase_residency","category":"page"},{"location":"functions/#GasChromatographySimulator.mobile_phase_residency","page":"Functions","title":"GasChromatographySimulator.mobile_phase_residency","text":"mobile_phase_residency(x, t, T_itp, pin_itp, pout_itp, L, d, gas; ng=false)\n\nCalculate the residency (the inverse velocity) of the mobile phase at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nr_M(xt) = 64 fracd^2 κ_LT(xt)fracp(xt)p_in^2-p_out^2\n\nwith T_n the normalized temperature (T_n=(25 + 27315)K), p_n the normalized pressure (p_n = 101300 Pa(a)), κ_L the flow restriction of the column and p(xt) the local pressure.\n\nSee also: pressure, flow_restriction\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.residency","category":"page"},{"location":"functions/#GasChromatographySimulator.residency","page":"Functions","title":"GasChromatographySimulator.residency","text":"residency(x, t, T_itp, pin_itp, pout_itp, L, d, df, gas, Tchar, θchar, ΔCp,  φ₀; ng=false)\n\nCalculate the residency (the inverse velocity) of the solute at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ndf: Film thickness of the GC column, in m.\ngas: Name of the mobile phase gas.\nTchar: Characteristic temperature of the solute, in K.\nθchar: Characteristic parameters of the solute, in °C.\nΔCp: Change of the isobaric heat capacity of the solute moving from the mobile to the\n\nstationary phase, in J mol⁻¹ K⁻¹.\n\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the\n\nthermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\n\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nr(xt) = r_M(xt) left(1+k(xt)right)\n\nwith r_M the residency of the mobile phase and k(xt) the retention factor of the solute on the stationary phase.\n\nSee also: mobile_phase_residency, retention_factor\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.retention_factor","category":"page"},{"location":"functions/#GasChromatographySimulator.retention_factor","page":"Functions","title":"GasChromatographySimulator.retention_factor","text":"retention_factor(x, t, T_itp, d, df, Tchar, θchar, ΔCp, φ₀)\n\nCalculate the retention factor of the solute in the stationary phase at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nd: Diameter of the GC column, in m.\ndf: Film thickness of the GC column, in m.\nTchar: Characteristic temperature of the solute, in K.\nθchar: Characteristic parameters of the solute, in °C.\nΔCp: Change of the isobaric heat capacity of the solute moving from the mobile to the\n\nstationary phase, in J mol⁻¹ K⁻¹.\n\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the\n\nthermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\n\nk(xt) = fracφφ₀ expleft((fracΔC_pR+fracT_charθ_char)(fracT_charT+-1)     fracΔC_pRln(fracTT_char)right)\n\nwith R the molar gas constant and φ the dimensionless film thickness of the simulated GC system (φ = d_fd).\n\nTODO: add option for the retention model ('ABC', 'K-centric')\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plate_height","category":"page"},{"location":"functions/#GasChromatographySimulator.plate_height","page":"Functions","title":"GasChromatographySimulator.plate_height","text":"plate_height(x, t, T_itp, pin_itp, pout_itp, L, d, df, gas, Tchar, θchar, ΔCp, φ₀, Dag; ng=false)\n\nCalculate the plate height of the solute at position x at time t according to the Golay equation.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ndf: Film thickness of the GC column, in m.\ngas: Name of the mobile phase gas.\nTchar: Characteristic temperature of the solute, in K.\nθchar: Characteristic parameters of the solute, in °C.\nΔCp: Change of the isobaric heat capacity of the solute moving from the mobile to the\n\nstationary phase, in J mol⁻¹ K⁻¹.\n\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the\n\nthermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\n\nDag: diffusivity of solute a in gas g.\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nH(xt) = 2 fracD_Mu_M + fracd^296left(6 μ^2-16 μ +11 right) fracu_MD_M + frac23 d_f^2 μ(1-μ) fracu_MD_S\n\nwith D_M the diffusion coefficient of the solute in the mobile phase, D_S the diffusion coefficient of the solute in the stationary phase, u_M the velocity of the mobile phase and μ the mobility of the solute.\n\nD_S is correlated to D_M by: \n\nD_S = fracD_M10000\n\nTODO: alternative correlations?\n\nu_M is realated to the residency of the mobile phase r_M:\n\nu_M = frac1r_M\n\nμ is correlated to the retention factor k:\n\nμ = frac11 + k\n\nSee also: diffusion_mobile, mobile_phase_residency, retention_factor\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.diffusion_mobile","category":"page"},{"location":"functions/#GasChromatographySimulator.diffusion_mobile","page":"Functions","title":"GasChromatographySimulator.diffusion_mobile","text":"diffusion_mobile(x, t, T_itp, pin_itp, pout_itp, L, d, gas, Dag; ng=false)\n\nCalculate the diffusion coefficient of the solute in the mobile phase at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nDag: diffusivity of solute a in gas g.\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nD_M(xt) = D_ag fracT(xt)^175p(xt)\n\n\n\n\n\n","category":"function"},{"location":"functions/#Solving","page":"Functions","title":"Solving","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.simulate","category":"page"},{"location":"functions/#GasChromatographySimulator.simulate","page":"Functions","title":"GasChromatographySimulator.simulate","text":"simulate(par::Parameters)\n\nSimulate the GC system defined by the structure par.\n\nNote: Based on the option for odesys the result is different. For odesys = true the result is a dataframe (the peaklist) and the solution of the ODEs as a system (solution structure from DifferentialEquations.jl). If odesys = false the result is a dataframe (the peaklist) and the two solutions of the ODEs for time t(z) and peak variance τ²(z).\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solve_system_multithreads","category":"page"},{"location":"functions/#GasChromatographySimulator.solve_system_multithreads","page":"Functions","title":"GasChromatographySimulator.solve_system_multithreads","text":"solve_system_multithreads(par::Parameters)\n\nSimulate the GC system defined by the structure par by solving the ODEs for t(z) and τ²(z) together as a system of ODEs using multiple threads (parallel computing) for the simulation of different solutes. \n\nNote: The result is an array of the solution structure from DifferentialEquations.jl.\n\nExamples\n\njulia> sol = solve_system_multithreads(par)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solve_multithreads","category":"page"},{"location":"functions/#GasChromatographySimulator.solve_multithreads","page":"Functions","title":"GasChromatographySimulator.solve_multithreads","text":"solve_multithreads(par::Parameters)\n\nSimulate the GC system defined by the structure par by solving the ODEs for t(z) and τ²(z) separatly (solving t(z) and using this result to solve for τ²(z)) using multiple threads (parallel computing) for the simulation of different solutes.\n\nNote: The result are two arrays of the solution structure from DifferentialEquations.jl.\n\nExamples\n\njulia> sol, peak = solve_multithreads(par)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solving_migration","category":"page"},{"location":"functions/#GasChromatographySimulator.solving_migration","page":"Functions","title":"GasChromatographySimulator.solving_migration","text":"solving_migration(sys::System, prog::Program, sub::Substance, opt::Options)\n\nSolve for the migration t(z) of solute sub in the GC system sys with the program prog and the options opt.\n\nNote: The result is the solution structure from DifferentialEquations.jl.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solving_peakvariance","category":"page"},{"location":"functions/#GasChromatographySimulator.solving_peakvariance","page":"Functions","title":"GasChromatographySimulator.solving_peakvariance","text":"solving_peakvariance(solution_tz, sys::System, prog::Program, sub::Substance, opt::Options)\n\nSolve for the development of the peak variance τ²(z) of solute sub in the GC system sys with the program prog and the options opt during its migration defined by solution_tz.\n\nNote: The result is the solution structure from DifferentialEquations.jl.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solving_odesystem_r","category":"page"},{"location":"functions/#GasChromatographySimulator.solving_odesystem_r","page":"Functions","title":"GasChromatographySimulator.solving_odesystem_r","text":"solving_odesystem_r(sys::System, prog::Program, sub::Substance, opt::Options)\n\nSolve the migration t(z) and peak variance development τ²(z) of solute sub in the GC system sys with the program prog and the options opt as a system of ODEs.\n\nNote: The result is the solution structure from DifferentialEquations.jl.\n\nSee also: odesystem_r!\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.odesystem_r!","category":"page"},{"location":"functions/#GasChromatographySimulator.odesystem_r!","page":"Functions","title":"GasChromatographySimulator.odesystem_r!","text":"odesystem_r!(dt, t, p, z)\n\nThe ODE system for migration t(z) and peak variance development τ²(z).\n\nfracdtdz = r(z t(z))\n\nfracdτ^2dz = H(z t(z)) r(z t(z)) + 2 τ^2(z t(z)) fracrt(zt(z))\n\nSee also: solving_odesystem_r, peakode\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.peakode","category":"page"},{"location":"functions/#GasChromatographySimulator.peakode","page":"Functions","title":"GasChromatographySimulator.peakode","text":"peakode(z, t, τ², sys, prog, sub, opt)\n\nThe second ODE function for the ODE system describing the peak variance development τ²(z), using (in parts) automatic differentiation.\n\nfracdτ^2dz = H(z t(z)) r(z t(z)) + 2 τ^2(z t(z)) fracrt(zt(z))\n\nTODO: alternative to QuadGK.jl for integration which is available for ForwardDiff.jl \n\nSee also: solving_odesystem_r, odesystem_r!\n\n\n\n\n\n","category":"function"},{"location":"functions/#Results","page":"Functions","title":"Results","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.peaklist(sol, par)\n\nGasChromatographySimulator.peaklist(sol, peak, par)","category":"page"},{"location":"functions/#GasChromatographySimulator.peaklist-Tuple{Any, Any}","page":"Functions","title":"GasChromatographySimulator.peaklist","text":"peaklist(sol, par)\n\nConstruct a DataFrame with the peak list of the solution sol of the simulation of the GC system defined by par. \n\nOutput\n\nThe peaklist DataFrame consists of the entrys: \n\nName: Name of the solute.\ntR: Retention time of the solute (in s).\nτR: Peak width of the solute (in s). \nTR: Temperature of the end of the column at the retention time (in °C).\nσR: Band width of the solute at retention time (in m).\nuR: Solute velocity at retention time (in m/s).\nkR: Retention factor of the solute at retention time.\n\nExamples\n\njulia> pl = peaklist(sol, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"functions/#GasChromatographySimulator.peaklist-Tuple{Any, Any, Any}","page":"Functions","title":"GasChromatographySimulator.peaklist","text":"peaklist(sol, peak, par)\n\nConstruct a DataFrame with the peak list of the solution sol and peak of the simulation of the GC system defined by par. \n\nOutput\n\nThe peaklist DataFrame consists of the entrys: \n\nName: Name of the solute.\ntR: Retention time of the solute (in s).\nτR: Peak width of the solute (in s). \nTR: Temperature of the end of the column at the retention time (in °C).\nσR: Band width of the solute at retention time (in m).\nuR: Solute velocity at retention time (in m/s).\nkR: Retention factor of the solute at retention time.\n\nExamples\n\njulia> pl = peaklist(sol, peak, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.sol_extraction(sol, par)","category":"page"},{"location":"functions/#GasChromatographySimulator.sol_extraction-Tuple{Any, Any}","page":"Functions","title":"GasChromatographySimulator.sol_extraction","text":"sol_extraction(sol, par)\n\nExtract the points z=t, t=u1, τ²=u2 from the solution sol of the ODE system of the GC system defined by par and exports them in a DataFrame.\n\nExamples\n\ndf_sol = sol_extraction(sol, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.sol_extraction(sol, peak, par)","category":"page"},{"location":"functions/#GasChromatographySimulator.sol_extraction-Tuple{Any, Any, Any}","page":"Functions","title":"GasChromatographySimulator.sol_extraction","text":"sol_extraction(sol, peak, par)\n\nExtract the points zt=sol.t, t=sol.u, zτ²=peak.t and τ²=peak.u from the solution sol and peak of the ODEs of the GC system defined by par and exports them in a DataFrame.\n\nExamples\n\ndf_sol = sol_extraction(sol, peak, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Blumberg.2017\nLeppert.2020a\nDifferentialEquations.jl\nInterpolations.jl\nQuadGK.jl\nForwardDiff.jl\nPluto.jl","category":"page"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Parameters-defining-a-simulation","page":"Usage","title":"Parameters defining a simulation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"A GC-system for the simulation is defined by four sets of parameters:","category":"page"},{"location":"usage/#GC-system","page":"Usage","title":"GC-system","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The GC-system parameters GasChromatographySimulator.System defines the dimensions of the GC column, length L, diameter d and film thickness of the stationary phase d_f, all measured in meters, the name of the stationary phase and the name of the mobile phase (with the allowed values \"He\", \"H2\" and \"N2\").","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: GC-column)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"sys = GasChromatographySimulator.System(4.0, 0.1e-3, 0.1e-6, \"Rxi17SilMS\", \"He\")","category":"page"},{"location":"usage/#Program","page":"Usage","title":"Program","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The program parameters GasChromatographySimulator.Program defines the temperature and pressure program for the GC separation.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The definition of the program parameters will be explained by two examples.","category":"page"},{"location":"usage/#Without-thermal-gradient","page":"Usage","title":"Without thermal gradient","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Without a thermal gradient the temperature is the same at every column position at the same time. This is the normal case for conventional GC. One example of such a program can be achieved by the following method, which constructs the Program-structure:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"prog = GasChromatographySimulator.Program(  [0.0, 60.0, 600.0, 120.0],\n                                            [40.0, 40.0, 300.0, 300.0],\n                                            [18.0, 18.0, 98.0, 98.0].*1000.0 .+ 101300.0,\n                                            [0.0, 0.0, 0.0, 0.0],\n                                            sys.L)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The first array defines the time steps (in s), the second array defines the temperatures (in °C) at these time steps, the third and fourth array define the inlet and outlet pressures (both in Pa(absolute)) at the time steps. The values of temperature and pressures change linearly between the values defined at the time steps. The following picture shows the resulting temperature and pressure program.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: Program without thermal gradient)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The first time step is always zero (t₁ = 0.0 s). The following time steps define the time that passes until the next step. In the example the second time step is t₂ = 60 seconds long and in this time the temperature stays constant at 40°C (it changes linearly from T₁ = 40°C to T₂ = 40°C). With the next time step (t₃ = 600 s) the temperature changes from T₂ = 40°C linearly to T₃ = 300°C. In the last time step (t₄ = 120 s) the temperature is again kept constant at 300°C. The pressure program is defined in the same way.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The four arrays for time steps, temperatures and the two pressures must have the same number of elements, otherwise the construction of the Program-structure gives an error message.","category":"page"},{"location":"usage/#Thermal-gradient","page":"Usage","title":"Thermal gradient","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"...","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"...picthermalgradient","category":"page"},{"location":"usage/#Substances","page":"Usage","title":"Substances","text":"","category":"section"},{"location":"usage/#Database","page":"Usage","title":"Database","text":"","category":"section"},{"location":"usage/#Additional-Options","page":"Usage","title":"Additional Options","text":"","category":"section"},{"location":"usage/#Run-the-simulation","page":"Usage","title":"Run the simulation","text":"","category":"section"},{"location":"usage/#Evaluate-the-results","page":"Usage","title":"Evaluate the results","text":"","category":"section"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"First a simple example.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Advanced example with a database file.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Advanced example with a thermal gradient.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Advanced example with a user defined gradient function (or diameter function, or film thickness function))","category":"page"},{"location":"examples/#Pluto-Notebook","page":"Examples","title":"Pluto Notebook","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"A Pluto notebook with a simple example is available. [Pluto.jl]","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"To use GasChromatographicSimulator.jl, you need to install Julia 1.6 or greater first (official Julia website) and than add the package:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> ] add https://github.com/JanLeppert/GasChromatographySimulator.jl","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"To use the package type:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> using GasChromatographySimulator","category":"page"},{"location":"#GasChromatographySimulator.jl-Documentation","page":"Home","title":"GasChromatographySimulator.jl Documentation","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package GasChromatographySimulator.jl simulates the separation of different substances (solutes) in a gas chromatographic (GC) system. The simulation uses ordinary differential equations (ODE) to model the migration t(z) of a solute through the GC system and the development of the peak variance during this migration τ²(z).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Beside a temperature program (change of the temperature of the GC-system with time) and a pressure program (change of inlet and/or outlet pressure with time), a thermal gradient (change of the temperature along the GC column) can be added. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The interaction between the substances and the stationary phase of the GC-system is described by a thermodynamic model (K-centric thermodynamic parameters [Blumberg.2017])","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Chromatogram)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For further details see [Leppert.2020a].","category":"page"},{"location":"","page":"Home","title":"Home","text":"The simulation uses the following packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"DifferentialEquations.jl\nInterpolations.jl\nQuadGK.jl\nForwardDiff.jl\nPluto.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"The manual is structured as followed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"installation.md\",\n    \"usage.md\",\n    \"examples.md\",\n    \"functions.md\",\n    \"references.md\"\n    ]\nDepth = 1","category":"page"}]
}
