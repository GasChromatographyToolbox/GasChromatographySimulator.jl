var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/#Structures-and-Constructors","page":"Functions","title":"Structures and Constructors","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Column","category":"page"},{"location":"functions/#GasChromatographySimulator.Column","page":"Functions","title":"GasChromatographySimulator.Column","text":"Column(L, d, a_d, df, a_df, sp, gas)\n\nStructure describing the GC Column. \n\nArguments\n\nL: Length of the capillary measured in m (meter)\nd: A function d(x, a_d) of x, the position along the capillary, describing the diameter in m (meter). Or a number for a constant value.\na_d: Parameters of the diameter function. \nd_f: A function d_f(x, a_df) of x, describing the film thickness in m (meter). Or a number for a constant value.\na_df: Parameters of the film thickness function. \nsp: The name of the stationary phase.\ngas: The name of the mobile phase. Allowed values: He, H2 or N2.\n\n\n\n\n\n","category":"type"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Column(L, d, df, sp, gas)","category":"page"},{"location":"functions/#GasChromatographySimulator.Column-NTuple{5, Any}","page":"Functions","title":"GasChromatographySimulator.Column","text":"Column(L, d, df, sp, gas)\n\nConstruct the structure Column with given values for the case of constant diameter d and film thickness df. \n\nArguments\n\nL: Length of the capillary measured in m (meter).\nd: Diameter of the capillary measured in m (meter). \nd_f: Film thickness of the capillary measured in m (meter).\nsp: The name of the stationary phase.\ngas: The name of the mobile phase. Allowed values: He, H2 or N2.\n\nExamples\n\njulia julia> Column(10.0, 0.1e-3, 0.1e-6, \"DB5\", \"He\")\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Program","category":"page"},{"location":"functions/#GasChromatographySimulator.Program","page":"Functions","title":"GasChromatographySimulator.Program","text":"Program(time_steps, temp_steps, Fpin_steps, pout_steps, gf, a_gf, T_itp, Fpin_itp, pout_itp)\n\nStructure to describe the temperature and flow/pressure program of a GC Column. The function gf describes an optional thermal gradient.\n\nArguments\n\ntime_steps: Time steps in s (seconds). \ntemp_steps: Temperature steps in °C (degree celsius).\nFpin_steps: Flow steps in m³/s resp. inlet pressure steps in Pa(a) (pascal, absolute).\npout_steps: Outlet pressure steps in Pa(a) (pascal, absolute).\ngf: Gradient function gf(x, a_gf), describes the thermal gradient.\na_gf: Parameters of the gradient function.\nT_itp: Interpolated (linear) temperature T(x,t), constructed from time_steps, temp_steps and gf.\nFpin_itp: Interpolated (linear) flow/inlet pressure Fpin(t), constructed from time_steps and Fpin_steps.\npout_itp: Interpolated (linear) outlet pressure pout(t), constructed from time_steps and pout_steps.  \n\nNote: The length of the arrays time_steps, temp_steps, pin_steps and a_gf have to be the same.\n\n\n\n\n\n","category":"type"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Program(time_steps::Array{<:Real, 1}, temp_steps::Array{<:Real, 1}, pin_steps::Array{<:Real, 1}, pout_steps::Array{<:Real, 1}, L)","category":"page"},{"location":"functions/#GasChromatographySimulator.Program-Tuple{Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Any}","page":"Functions","title":"GasChromatographySimulator.Program","text":"Program(time_steps::Array{<:Real, 1}, temp_steps::Array{<:Real, 1}, Fpin_steps::Array{<:Real, 1}, pout_steps::Array{<:Real, 1}, L)\n\nConstruct the structure Program with given values for the case without a thermal gradient. \n\nArguments\n\ntime_steps::Array{<:Real, 1}: Time steps in s (seconds). \ntemp_steps::Array{<:Real, 1}: Temperature steps in °C (degree celsius).\nFpin_steps::Array{<:Real, 1}: Flow steps in m³/s resp. inlet pressure steps in Pa(a).\npout_steps::Array{<:Real, 1}: Outlet pressure steps in Pa(a) (pascal, absolute).\nL: Length of the capillary measured in m (meter).\n\nThe length of the arrays time_steps, temp_steps, Fpin_steps and pout_steps have to be the same.\n\nThe argument L is used to construct the temperature interpolation T_itp(x,t).\n\nExamples\n\njulia> Program([0.0, 60.0, 300.0, 120.0],\n        [40.0, 40.0, 320.0, 320.0],\n        300000.0.*ones(4),\n        zeros(4),\n        10.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Program(time_steps::Array{<:Real, 1}, temp_steps::Array{<:Real, 1}, pin_steps::Array{<:Real, 1}, pout_steps::Array{<:Real, 1}, a_gf::Array{<:Real, 2}, Tcontrol, L)","category":"page"},{"location":"functions/#GasChromatographySimulator.Program-Tuple{Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Matrix{<:Real}, Any, Any}","page":"Functions","title":"GasChromatographySimulator.Program","text":"Program(time_steps, temp_steps, Fpin_steps, pout_steps, a_gf, Tcontrol, L)\n\nConstruct the structure Program with given values. \n\nArguments\n\ntime_steps: Time steps in s (seconds). \ntemp_steps: Temperature steps in °C (degree celsius).\nFpin_steps: Flow steps in m³/s resp. inlet pressure steps in Pa(a).\npout_steps: Outlet pressure steps in Pa(a) (pascal, absolute).\na_gf: Parameters of the gradient function.\nTcontrol: Option defining at which point of the column the temperature\n\nprogram is calculated. The options are inlet (x=0) and outlet (x=L).\n\nL: Length of the capillary measured in m (meter).\n\nThe length of the arrays time_steps, temp_steps, pin_steps, pout_steps and a_gf have to be the same.\n\nThe arguments Tcontrol and L are used to construct the thermal gradient function gf(x) and the temperature interpolation T_itp(x,t).\n\nExamples\n\njulia> Program([0.0, 60.0, 300.0, 120.0],\n        [40.0, 40.0, 320.0, 320.0],\n        300000.0.*ones(4),\n        zeros(4),\n        [[20.0, 20.0, 20.0, 20.0] zeros(4) 10.0.*ones(4) [0.0, -2.0, -5.0, -5.0]],\n        \"inlet\",\n        10.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Substance","category":"page"},{"location":"functions/#GasChromatographySimulator.Substance","page":"Functions","title":"GasChromatographySimulator.Substance","text":"Substance(name, CAS, Tchar, θchar, ΔCp, φ₀, ann, Cag, t₀, τ₀)\n\nStructure to describe the properties of a solute, which migrates through the GC Column. These datas are in most cases read from a database with the function load_solute_database().\n\nArguments\n\nname: Name of the solute. \nCAS: CAS number of the solute.\nTchar: Characterisic temperature (in K). One of the three distribution-centric thermodynamic parameters describing the retention of this solute on the given stationary phase.\nθchar: Characterisic parameters (in °C). One of the three distribution-centric thermodynamic parameters describing the retention of this solute on the given stationary phase.\nΔCp: Change of the isobaric heat capacity moving from the mobile to the stationary phase (in J mol⁻¹ K⁻¹). One of the three distribution-centric thermodynamic parameters describing the retention of this solute on the given stationary phase.\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the thermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\nann: Annotations. In most cases the source of the data is noted here.\nCag: The diffusitivity constant of the solute a in the mobile phase g (in...). It is calculated by the function diffusitivity().\nt₀: Initial time of the solute (in s) at the start of the simulation.\nτ₀: Initial peak width of the solute (in s) at the start of the simulation. \n\nSee also: load_solute_database\n\n\n\n\n\n","category":"type"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Options","category":"page"},{"location":"functions/#GasChromatographySimulator.Options","page":"Functions","title":"GasChromatographySimulator.Options","text":"Options(alg, abstol, reltol, Tcontrol, odesys, ng, vis, control, k_th)\n\nStructure describing some general options for the simulation. \n\nArguments\n\nalg: The algorithm used for the ODE solver. The algorithms OwrenZen3(), OwrenZen4() and OwrenZen5() are recommended.\nabstol: The absolute tolerance for the ODE solver. Recommended value 1e-6 to 1e-8.\nreltol: The relative tolerance for the ODE solver. Recommended value 1e-3 to 1e-5. \nTcontrol: Option defining at which point of the column the temperature program is calculated. The options are inlet (x=0) and outlet (x=L).\nodesys: Combine the ODEs for migration and peak-width into a system of ODEs (odesys = true) or solve the two ODEs separately (odesys = false).\nng: Option to calculate the simulation without a gradient (ng = true) or with a gradient (ng = false).\nvis: Used model of viscosity. HP is a second-order polynomial taken from the HP flow calculator. Blumberg is an emperical formula according to the book   Temperature-programmed Gas Chromatography by Leonid M. Blumberg (2010, Wiley-VCH).\ncontrol: Control of the \"Flow\" or of the \"Pressure\" (at column inlet) during the program.\nk_th: Threshold for the maximum of the retention factor. If the calculated retention factor is bigger than k_th than the retention factor is set to the value k_th.   This is done to avoid to small step widths in the solver for highly retained soultes at the beginning of a GC program. \n\nTODO: add option for the retention model ('ABC', 'K-centric')\n\nFor more informations about the arguments alg, abstol and reltol see the documentation of the DifferentialEquations.jl package.\n\n\n\n\n\n","category":"type"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Parameters","category":"page"},{"location":"functions/#GasChromatographySimulator.Parameters","page":"Functions","title":"GasChromatographySimulator.Parameters","text":"Parameters(col, prog, sub, opt)\n\nStructure describing all parameters for the simulation of a GC system. \n\nArguments\n\ncol: Structure Column describing the parameters of the GC column and   mobile phase gas.\nprog: Structure Program describing the temperature and pressure   program of a GC Column.\nsub: An array of the structure Substance describing the parameters of   the solutes which are separated in the GC simulation. \nopt: Structure Options describing additional option parameters.\n\n\n\n\n\n","category":"type"},{"location":"functions/#Physical-Model","page":"Functions","title":"Physical Model","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.pressure","category":"page"},{"location":"functions/#GasChromatographySimulator.pressure","page":"Functions","title":"GasChromatographySimulator.pressure","text":"pressure(x, t, T_itp, Fpin_itp, pout_itp, L, d, gas; ng=false, vis=\"Blumberg\", control=\"Pressure\")\n\nCalculate the pressure at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nFpin_itp: Interpolated (linear) flow F(t) resp. inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m. Can be a function of position x.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)   or with a gradient (ng = false, eq. 1).\nvis: used model for viscosity \"Blumberg\" or \"HP\"\ncontrol: Control of the \"Flow\" or of the \"Pressure\" (at column inlet) during the program\n\np(xt) = sqrt(p_in(t)^2-fracκ(xt)κ_L(t)left(p_in^2-p_out^2right)) Eq. 1\n\np(xt) = sqrt(p_in(t)^2-fracxLleft(p_in^2-p_out^2right)) Eq. 2\n\nwith κ(xt) the flow restriction up to position x at time t and κ_L(t) = κ(x=Lt) the flow restriction of the whole column at time t.\n\nSee also: flow_restriction\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.flow_restriction","category":"page"},{"location":"functions/#GasChromatographySimulator.flow_restriction","page":"Functions","title":"GasChromatographySimulator.flow_restriction","text":"flow_restriction(x, t, T_itp, d, gas; ng=false, vis=\"Blumberg\")\n\nCalculate the flow restriction κ up to position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nd: Diameter of the GC column, in m. Can be a function of position x.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)   or with a gradient (ng = false, eq. 1).\nvis: used model for viscosity \"Blumberg\" or \"HP\"\n\nκ(xt) = int_0^x fracη(yt) T(yt)d(y)^4dy Eq. 1\n\nκ(xt) = fracη(t) T(t) xd^4 Eq. 2\n\nwith η(xt) the viscosity of the mobile phase gas.\n\nSee also: viscosity\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.viscosity","category":"page"},{"location":"functions/#GasChromatographySimulator.viscosity","page":"Functions","title":"GasChromatographySimulator.viscosity","text":"viscosity(x, t, T_itp, gas; vis=\"Blumberg\")\n\nCalculate the (dynamic) viscosity of the mobile phase gas at position x at time t in Pa s.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\ngas: Name of the mobile phase gas.\nvis: used model\n\nvis = \"HP\"\n\nSimple model used in the HP Flow calculator\n\n`η(x,t) = C_1 * \\left(T(x,t) + T_{st}\\right) + C_2\n\nvis = \"Blumberg\"\n\nη(xt) = η_stleft(fracT(xt)T_stright)^(ξ_0 + ξ_1 fracT(xt)-T_stT_st) \n\nwith η_st, ξ_0 and ξ_1 parameters dependent on the mobile phase gas [1].\n\n[1] Blumberg, Leonid M., Temperature-Programmed Gas Chromatography, Wiley-VCH, 2010.\n\n\n\n\n\nviscosity(T, gas; vis=\"Blumberg\")\n\nCalculate the (dynamic) viscosity of the mobile phase gas at temperature T in Pa s.\n\nArguments\n\nT: Temperature in K.\ngas: Name of the mobile phase gas.\nvis: used model for viscosity \"Blumberg\" or \"HP\".\n\nvis = \"HP\"\n\nSimple model used in the HP Flow calculator\n\n`η(x,t) = C_1 * \\left(T(x,t) + T_{st}\\right) + C_2\n\nvis = \"Blumberg\"`\n\nη(xt) = η_stleft(fracT)T_st ight)^(ξ_0 + ξ_1 fracT-T_stT_st) \n\nwith η_st, ξ_0 and ξ_1 parameters dependent on the mobile phase gas [1].\n\n[1] Blumberg, Leonid M., Temperature-Programmed Gas Chromatography, Wiley-VCH, 2010.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.holdup_time","category":"page"},{"location":"functions/#GasChromatographySimulator.holdup_time","page":"Functions","title":"GasChromatographySimulator.holdup_time","text":"holdup_time(T, Fpin, pout, L, d, gas; vis=\"Blumberg\", control=\"Pressure\")\n\nCalculate the hold-up time in s without a gradient.\n\nArguments\n\nT: Temperature in K.\nFpin: Flow in m³/s resp. inlet pressure in Pa(a).\npout: Outlet pressure in Pa(g).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nvis: used model for viscosity \"Blumberg\" or \"HP\".\ncontrol: Control of the \"Flow\" or of the \"Pressure\" (at column inlet) during the program\n\nt_M = frac1283fracL^2d^2ηfracp_in^3-p_out^3(p_in^2-p_out^2)^2\n\n\n\n\n\nholdup_time(t, T_itp, pin_itp, pout_itp, L, d, gas; ng=false, vis=\"Blumberg\", control=\"Pressure\")\n\nCalculate the hold-up time in s at time t with a gradient.\n\nArguments\n\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)   or with a gradient (ng = false, eq. 1).\nvis: used model for viscosity \"Blumberg\" or \"HP\".\ncontrol: Control of the \"Flow\" or of the \"Pressure\" (at column inlet) during the program\n\nt_M(t) = 64fracκ_L(t)p_in(t)^2-p_out(t)^2 int_0^L d(y)^2fracp(yt)T(yt)dy Eq. 1\n\nt_M(t) = frac1283fracL^2d^2η(t)fracp_in(t)^3-p_out(t)^3(p_in(t)^2-p_out(t)^2)^2 Eq. 2\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.flow","category":"page"},{"location":"functions/#GasChromatographySimulator.flow","page":"Functions","title":"GasChromatographySimulator.flow","text":"flow(T, Fpin, pout, L, d, gas; vis=\"Blumberg\", control=\"Pressure\")\n\nCalculate the normalized flow through the GC column in m³/s without a gradient.\n\nArguments\n\nT: Temperature in K.\nFpin: Flow in m³/s resp. inlet pressure in Pa(a).\npout: Outlet pressure in Pa(g).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nvis: used model for viscosity \"Blumberg\" or \"HP\".\ncontrol: Control of the \"Flow\" or of the \"Pressure\" (at column inlet) during the program\n\nF = fracπ256fracT_np_nfracd^4Lfracp_in^2-p_out^2η T\n\nwith T_n the normalized temperature (T_n=(25 + 27315)K), p_n the normalized pressure (p_n = 101300 Pa(a)) and η the viscosity the mobile phase gas at temperature T.\n\n\n\n\n\nflow(t, T_itp, Fpin_itp, pout_itp, L, d, gas; ng=false, vis=\"Blumberg\", control=\"Pressure\")\n\nCalculate the normalized flow through the GC column in m³/s at time t.\n\nArguments\n\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nFpin_itp: Interpolated (linear) Flow F(t) resp. inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)   or with a gradient (ng = false, eq. 1).\nvis: used model for viscosity \"Blumberg\" or \"HP\".\ncontrol: Control of the \"Flow\" or of the \"Pressure\" (at column inlet) during the program\n\nF(t) = fracπ256fracT_np_nfracp_in(t)^2-p_out(t)^2κ_L(t) Eq. 1\n\nF(t) = fracπ256fracT_np_nfracd^4Lfracp_in(t)^2-p_out(t)^2η(t) T(t) Eq. 2\n\nwith T_n the normalized temperature (T_n=(25 + 27315)K), p_n the normalized pressure (p_n = 101300 Pa(a)), κ_L the flow restriction of the column and η the viscosity the mobile phase gas at temperature T.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.mobile_phase_residency","category":"page"},{"location":"functions/#GasChromatographySimulator.mobile_phase_residency","page":"Functions","title":"GasChromatographySimulator.mobile_phase_residency","text":"mobile_phase_residency(x, t, T_itp, Fpin_itp, pout_itp, L, d, gas; ng=false, vis=\"Blumberg\", control=\"Pressure\")\n\nCalculate the residency (the inverse velocity) of the mobile phase at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nFpin_itp: Interpolated (linear) Flow F(t) resp. inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nvis: used model for viscosity \"Blumberg\" or \"HP\".\ncontrol: Control of the \"Flow\" or of the \"Pressure\" (at column inlet) during the program\n\nr_M(xt) = 64 fracd^2 κ_LT(xt)fracp(xt)p_in^2-p_out^2\n\nwith T_n the normalized temperature (T_n=(25 + 27315)K), p_n the normalized pressure (p_n = 101300 Pa(a)), κ_L the flow restriction of the column and p(xt) the local pressure.\n\nSee also: pressure, flow_restriction\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.residency","category":"page"},{"location":"functions/#GasChromatographySimulator.residency","page":"Functions","title":"GasChromatographySimulator.residency","text":"residency(x, t, T_itp, Fpin_itp, pout_itp, L, d, df, gas, Tchar, θchar, ΔCp,  φ₀; ng=false, vis=\"Blumberg\", control=\"Pressure\")\n\nCalculate the residency (the inverse velocity) of the solute at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nFpin_itp: Interpolated (linear) Flow F(t) resp. inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ndf: Film thickness of the GC column, in m.\ngas: Name of the mobile phase gas.\nTchar: Characteristic temperature of the solute, in K.\nθchar: Characteristic parameters of the solute, in °C.\nΔCp: Change of the isobaric heat capacity of the solute moving from the mobile to the\n\nstationary phase, in J mol⁻¹ K⁻¹.\n\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the\n\nthermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\n\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nvis: used model for viscosity \"Blumberg\" or \"HP\".\ncontrol: Control of the \"Flow\" or of the \"Pressure\" (at column inlet) during the program\n\nr(xt) = r_M(xt) left(1+k(xt)right)\n\nwith r_M the residency of the mobile phase and k(xt) the retention factor of the solute on the stationary phase.\n\nSee also: mobile_phase_residency, retention_factor\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.retention_factor","category":"page"},{"location":"functions/#GasChromatographySimulator.retention_factor","page":"Functions","title":"GasChromatographySimulator.retention_factor","text":"retention_factor(x, t, T_itp, d, df, Tchar, θchar, ΔCp, φ₀)\n\nCalculate the retention factor of the solute in the stationary phase at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nd: Diameter of the GC column, in m.\ndf: Film thickness of the GC column, in m.\nTchar: Characteristic temperature of the solute, in K.\nθchar: Characteristic parameters of the solute, in °C.\nΔCp: Change of the isobaric heat capacity of the solute moving from the mobile to the\n\nstationary phase, in J mol⁻¹ K⁻¹.\n\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the\n\nthermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\n\nk(xt) = fracφφ₀ expleft((fracΔC_pR+fracT_charθ_char)(fracT_charT+-1)     fracΔC_pRln(fracTT_char)right)\n\nwith R the molar gas constant and φ the dimensionless film thickness of the simulated GC Column (φ = d_fd).\n\nTODO: add option for the retention model ('ABC', 'K-centric')\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plate_height","category":"page"},{"location":"functions/#GasChromatographySimulator.plate_height","page":"Functions","title":"GasChromatographySimulator.plate_height","text":"plate_height(x, t, T_itp, Fpin_itp, pout_itp, L, d, df, gas, Tchar, θchar, ΔCp, φ₀, Cag; ng=false, vis=\"Blumberg\", control=\"Pressure\", k_th=1e12)\n\nCalculate the plate height of the solute at position x at time t according to the Golay equation.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nFpin_itp: Interpolated (linear) Flow F(t) resp. inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ndf: Film thickness of the GC column, in m.\ngas: Name of the mobile phase gas.\nTchar: Characteristic temperature of the solute, in K.\nθchar: Characteristic parameters of the solute, in °C.\nΔCp: Change of the isobaric heat capacity of the solute moving from the mobile to the\n\nstationary phase, in J mol⁻¹ K⁻¹.\n\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the\n\nthermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\n\nCag: diffusivity constant of solute a in gas g.\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nvis: used model for viscosity \"Blumberg\" or \"HP\".\ncontrol: Control of the \"Flow\" or of the \"Pressure\" (at column inlet) during the program\n\nH(xt) = 2 fracD_Mu_M + fracd^296left(6 μ^2-16 μ +11 right) fracu_MD_M + frac23 d_f^2 μ(1-μ) fracu_MD_S\n\nwith D_M the diffusion coefficient of the solute in the mobile phase, D_S the diffusion coefficient of the solute in the stationary phase, u_M the velocity of the mobile phase and μ the mobility of the solute.\n\nD_S is correlated to D_M by: \n\nD_S = fracD_M10000\n\nTODO: alternative correlations?\n\nu_M is realated to the residency of the mobile phase r_M:\n\nu_M = frac1r_M\n\nμ is correlated to the retention factor k:\n\nμ = frac11 + k\n\nSee also: diffusion_mobile, mobile_phase_residency, retention_factor\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.diffusion_mobile","category":"page"},{"location":"functions/#GasChromatographySimulator.diffusion_mobile","page":"Functions","title":"GasChromatographySimulator.diffusion_mobile","text":"diffusion_mobile(x, t, T_itp, Fpin_itp, pout_itp, L, d, gas, Cag; ng=false, vis=\"Blumberg\", control=\"Pressure\")\n\nCalculate the diffusion coefficient of the solute in the mobile phase at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nFpin_itp: Interpolated (linear) Flow F(t) resp. inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nCag: diffusivity constant of solute a in gas g.\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nvis: used model for viscosity \"Blumberg\" or \"HP\".\ncontrol: Control of the \"Flow\" or of the \"Pressure\" (at column inlet) during the program\n\nD_M(xt) = C_ag fracT(xt)^175p(xt)\n\n\n\n\n\n","category":"function"},{"location":"functions/#Solving","page":"Functions","title":"Solving","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.simulate","category":"page"},{"location":"functions/#GasChromatographySimulator.simulate","page":"Functions","title":"GasChromatographySimulator.simulate","text":"simulate(par::Parameters; kwargs...)\n\nSimulate the GC system defined by the structure par.\n\nNote: Based on the option for odesys the result is different. For odesys = true the result is a dataframe (the peaklist) and the solution of the ODEs as a system (solution structure from DifferentialEquations.jl). If odesys = false the result is a dataframe (the peaklist) and the two solutions of the ODEs for time t(z) and peak variance τ²(z). kwargs... to pass additional options to the ODE solve function as named tuples.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solve_system_multithreads","category":"page"},{"location":"functions/#GasChromatographySimulator.solve_system_multithreads","page":"Functions","title":"GasChromatographySimulator.solve_system_multithreads","text":"solve_system_multithreads(par::Parameters, kwargs...)\n\nSimulate the GC system defined by the structure par by solving the ODEs for t(z) and τ²(z) together as a system of ODEs using multiple threads (parallel computing) for the simulation of different solutes. kwargs... to pass additional options to the ODE solve function as named tuples. \n\nNote: The result is an array of the solution structure from DifferentialEquations.jl.\n\nExamples\n\njulia> sol = solve_system_multithreads(par)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solve_multithreads","category":"page"},{"location":"functions/#GasChromatographySimulator.solve_multithreads","page":"Functions","title":"GasChromatographySimulator.solve_multithreads","text":"solve_multithreads(par::Parameters, kwargs...)\n\nSimulate the GC system defined by the structure par by solving the ODEs for t(z) and τ²(z) separatly (solving t(z) and using this result to solve for τ²(z)) using multiple threads (parallel computing) for the simulation of different solutes. kwargs... to pass additional options to the ODE solve function as named tuples.\n\nNote: The result are two arrays of the solution structure from DifferentialEquations.jl.\n\nExamples\n\njulia> sol, peak = solve_multithreads(par)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solving_migration","category":"page"},{"location":"functions/#GasChromatographySimulator.solving_migration","page":"Functions","title":"GasChromatographySimulator.solving_migration","text":"solving_migration(col::Column, prog::Program, sub::Substance, opt::Options; kwargs...)\n\nSolve for the migration t(z) of solute sub in the GC Column col with the program prog and the options opt. kwargs... to pass additional options to the ODE solve function as named tuples.\n\nNote: The result is the solution structure from DifferentialEquations.jl.\n\n\n\n\n\nsolving_migration(Tchar, θchar, ΔCp, φ₀, L, d, df, prog, opt, gas; kwargs...)\n\nSolve for the migration t(z) of solute with retention parameters Tchar θchar and ΔCp estimated for a dimensionless film thickness φ₀ in a GC Column with length L, internal diameter d and film thickness df for a GC program prog,  options opt and mobile phase gas. kwargs... to pass additional options to the ODE solve function as named tuples.\n\nNote: The result is the solution structure from DifferentialEquations.jl.    \n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solving_peakvariance","category":"page"},{"location":"functions/#GasChromatographySimulator.solving_peakvariance","page":"Functions","title":"GasChromatographySimulator.solving_peakvariance","text":"solving_peakvariance(solution_tz, col::Column, prog::Program, sub::Substance, opt::Options; kwargs...)\n\nSolve for the development of the peak variance τ²(z) of solute sub in the GC Column col with the program prog and the options opt during its migration defined by solution_tz. kwargs... to pass additional options to the ODE solve function as named tuples.\n\nNote: The result is the solution structure from DifferentialEquations.jl.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solving_odesystem_r","category":"page"},{"location":"functions/#GasChromatographySimulator.solving_odesystem_r","page":"Functions","title":"GasChromatographySimulator.solving_odesystem_r","text":"solving_odesystem_r(col::Column, prog::Program, sub::Substance, opt::Options; kwargs...)\n\nSolve the migration t(z) and peak variance development τ²(z) of solute sub in the GC Column col with the program prog and the options opt as a system of ODEs. kwargs... to pass additional options to the ODE solve function as named tuples.\n\nNote: The result is the solution structure from DifferentialEquations.jl.\n\nSee also: odesystem_r!\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.odesystem_r!","category":"page"},{"location":"functions/#GasChromatographySimulator.odesystem_r!","page":"Functions","title":"GasChromatographySimulator.odesystem_r!","text":"odesystem_r!(dt, t, p, z)\n\nThe ODE system for migration t(z) and peak variance development τ²(z).\n\nfracdtdz = r(z t(z))\n\nfracdτ^2dz = H(z t(z)) r(z t(z)) + 2 τ^2(z t(z)) fracrt(zt(z))\n\nSee also: solving_odesystem_r, peakode\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.peakode","category":"page"},{"location":"functions/#GasChromatographySimulator.peakode","page":"Functions","title":"GasChromatographySimulator.peakode","text":"peakode(z, t, τ², col, prog, sub, opt)\n\nThe second ODE function for the ODE system describing the peak variance development τ²(z), using automatic differentiation.\n\nfracdτ^2dz = H(z t(z)) r(z t(z)) + 2 τ^2(z t(z)) fracrt(zt(z))\n\nSee also: solving_odesystem_r, odesystem_r!\n\n\n\n\n\n","category":"function"},{"location":"functions/#Results","page":"Functions","title":"Results","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.peaklist(sol, par)\n\nGasChromatographySimulator.peaklist(sol, peak, par)","category":"page"},{"location":"functions/#GasChromatographySimulator.peaklist-Tuple{Any, Any}","page":"Functions","title":"GasChromatographySimulator.peaklist","text":"peaklist(sol, par)\n\nConstruct a DataFrame with the peak list of the solution sol of the simulation of the GC system defined by par. \n\nOutput\n\nThe peaklist DataFrame consists of the entrys:\n\nNo: Number of the solute in the database. \nName: Name of the solute.\ntR: Retention time of the solute (in s).\nτR: Peak width of the solute (in s). \nTR: Temperature of the end of the column at the retention time (in °C).\nσR: Band width of the solute at retention time (in m).\nuR: Solute velocity at retention time (in m/s).\nkR: Retention factor of the solute at retention time.\nRes: Resolution (4τ) between neighboring peaks.\nΔs: separation metric between neighboring peaks, assuming linear development of peak width τR between the peaks.\nAnnotations: additional anotations, e.g. Source, categories, if available\n\nExamples\n\njulia> pl = peaklist(sol, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"functions/#GasChromatographySimulator.peaklist-Tuple{Any, Any, Any}","page":"Functions","title":"GasChromatographySimulator.peaklist","text":"peaklist(sol, peak, par)\n\nConstruct a DataFrame with the peak list of the solution sol and peak of the simulation of the GC system defined by par. \n\nOutput\n\nThe peaklist DataFrame consists of the entrys:\n\nNo: Number of the solute in the database.  \nName: Name of the solute.\ntR: Retention time of the solute (in s).\nτR: Peak width of the solute (in s). \nTR: Temperature of the end of the column at the retention time (in °C).\nσR: Band width of the solute at retention time (in m).\nuR: Solute velocity at retention time (in m/s).\nkR: Retention factor of the solute at retention time.\nRes: Resolution (4τ) between neighboring peaks.\nΔs: separation metric between neighboring peaks, assuming linear development of peak width τR between the peaks.\nAnnotations: additional anotations, e.g. Source, categories, if available\n\nExamples\n\njulia> pl = peaklist(sol, peak, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.sol_extraction(sol, par)","category":"page"},{"location":"functions/#GasChromatographySimulator.sol_extraction-Tuple{Any, Any}","page":"Functions","title":"GasChromatographySimulator.sol_extraction","text":"sol_extraction(sol, par)\n\nExtract the points z=t, t=u1, τ²=u2 from the solution sol of the ODE system of the GC system defined by par and exports them in a DataFrame.\n\nExamples\n\ndf_sol = sol_extraction(sol, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.sol_extraction(sol, peak, par)","category":"page"},{"location":"functions/#GasChromatographySimulator.sol_extraction-Tuple{Any, Any, Any}","page":"Functions","title":"GasChromatographySimulator.sol_extraction","text":"sol_extraction(sol, peak, par)\n\nExtract the points zt=sol.t, t=sol.u, zτ²=peak.t and τ²=peak.u from the solution sol and peak of the ODEs of the GC system defined by par and exports them in a DataFrame.\n\nExamples\n\ndf_sol = sol_extraction(sol, peak, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"functions/#Plot-functions","page":"Functions","title":"Plot functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plot_chromatogram","category":"page"},{"location":"functions/#GasChromatographySimulator.plot_chromatogram","page":"Functions","title":"GasChromatographySimulator.plot_chromatogram","text":"plot_chromatogram(peaklist, tlims; annotation=true, number=true, mirror=false, offset=0.0)\n\nPlot the chromatogram of the peaks listed in peaklist over the time tupel tlims = (t_start, t_end). \n\nArguments\n\npeaklist: DataFrame with the names, retention times and peak widths of the simulated substances.\ntlims: Tuple defining the start and end time of the plotted chromatogram.\nannotation: Boolean, switching the annotation of the peaks on/off; default = true.\nnumber: Boolean, switching the type of the annotation between number of the substance in the peaklist (number = true) or name of the substance (number = false); default = true.\nmirror: Boolean, if mirror = true the chromatogram is multiplied by -1; default = false.\noffset: Float64, this value is added to the chromatogram; default = 0.0.\n\nOutput\n\nTupel (p_chrom, t, chrom)\n\np_chrom: the plot of the chromatogram chrom over time t\nt: Array of time of the chromatogram\nchrom: Array of the abundance values of the chromatogram\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plot_chromatogram!","category":"page"},{"location":"functions/#GasChromatographySimulator.plot_chromatogram!","page":"Functions","title":"GasChromatographySimulator.plot_chromatogram!","text":"plot_chromatogram!(p_chrom, peaklist, tlims; annotation=true, number=true, mirror=false, offset=0.0)\n\nAdd the chromatogram of the peaks listed in peaklist over the time tupel tlims = (t_start, t_end) to the plot p_chrom. \n\nArguments\n\np_chrom: Plot of an existing chromatogram.\npeaklist: DataFrame with the names, retention times and peak widths of the simulated substances.\ntlims: Tuple defining the start and end time of the plotted chromatogram.\nannotation: Boolean, switching the annotation of the peaks on/off; default = true.\nnumber: Boolean, switching the type of the annotation between number of the substance in the peaklist (number = true) or name of the substance (number = false); default = true.\nmirror: Boolean, if mirror = true the chromatogram is multiplied by -1; default = false.\noffset: Float64, this value is added to the chromatogram; default = 0.0.\n\nOutput\n\nTupel (t, chrom)\n\nt: Array of time of the chromatogram\nchrom: Array of the abundance values of the chromatogram\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plot_flow","category":"page"},{"location":"functions/#GasChromatographySimulator.plot_flow","page":"Functions","title":"GasChromatographySimulator.plot_flow","text":"plot_flow(par)\n\nCalculate and plot the flow (in mL/min, normalized) of the carrier gas in a GC Column with a program defined in the parameters par::GasChromatography.Parameters.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plot_pressure","category":"page"},{"location":"functions/#GasChromatographySimulator.plot_pressure","page":"Functions","title":"GasChromatographySimulator.plot_pressure","text":"plot_pressure(prog)\n\nPlot the inlet and outlet pressure over time of the program prog::GasChromatographySimulator.Program.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plot_temperature","category":"page"},{"location":"functions/#GasChromatographySimulator.plot_temperature","page":"Functions","title":"GasChromatographySimulator.plot_temperature","text":"plot_temperature(par; selector=\"T(t)\")\n\nPlot the temperature program of the GC Column. \n\nArguments\n\npar::GasChromatographySimulator.Parameters: parameters of the GC system\nselector::String: selection of the plot as:\n\n* `selector = \"T(t)\"`: 2D-plot of temperature `T` over time `t` at inlet (`x=0`) and outlet (`x=L`)\n* `selector = \"T(x)\"`: 2D-plot of temperature `T` over column position `x` at the `time_steps` of the program\n* `selector = \"T(x,t)\"`: 3D-plot of temperature `T` over column position `x` and `t`\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.local_plots","category":"page"},{"location":"functions/#GasChromatographySimulator.local_plots","page":"Functions","title":"GasChromatographySimulator.local_plots","text":"local_plots(xx, yy, sol, par)\n\nShow additional 'local' plots of selected yy quantities over selected xx quantities.\n\nArguments\n\nxx: Selected quantity shown on the x-axis. Possible values: \"z\", \"t\", \"T\", \"τ\", \"σ\" and \"u\".\nyy: Selected quantity shown on the y-axis. Possible values: \"z\", \"t\", \"T\", \"τ\", \"σ\" and \"u\".\nsol: The solution of the simulation.\npar: The parameters of the simulated GC-system.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.velocity","category":"page"},{"location":"functions/#GasChromatographySimulator.velocity","page":"Functions","title":"GasChromatographySimulator.velocity","text":"velocity(df_sol, i, par)\n\nCalculate the velocity (in m/s) coressponding to solution of the i-th sunstance of a GC-system defined by par.\n\n\n\n\n\n","category":"function"},{"location":"functions/#UI-functions-for-notebooks","page":"Functions","title":"UI functions for notebooks","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.UI_Column","category":"page"},{"location":"functions/#GasChromatographySimulator.UI_Column","page":"Functions","title":"GasChromatographySimulator.UI_Column","text":"UI_Column(sp)\n\nConstruct a combined PlutoUI widget for the settings of the GC Column with the selectable stationary phases sp. \n\nUI fields\n\nL: column length in m.\nd: column diameter in mm.\nd_f: film thickness in µm.\nstat. phase: stationary phase of the column\nGas: mobile phase\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.UI_Program","category":"page"},{"location":"functions/#GasChromatographySimulator.UI_Program","page":"Functions","title":"GasChromatographySimulator.UI_Program","text":"UI_Program(; default=(\"0 60 300 300 120\", \"40 40 170 300 300\", \"0 0 40 60 0\", \"-3 -3 -3 -3 -3\", \"18 18 58 98 98\", \"0 0 0 0 0\"))\n\nConstruct a combined PlutoUI widget for the settings of the program of a GC column with or without a thermal gradient (depending on the default tuple).\n\nWith thermal gradient\n\nFor default as a tuple of six strings the folwing fields will be shown in the widget:\n\nexample default tupel: default=(\"0 60 300 300 120\", \"40 40 170 300 300\", \"0 0 40 60 0\", \"-3 -3 -3 -3 -3\", \"18 18 58 98 98\", \"0 0 0 0 0\")\n\n*time steps: the time steps after which duration the values of temperature, inlet pressure, ΔT and α are achieved by linear interpolation (in s). *temperature steps: the temperature steps (in °C).  *ΔT steps: the steps of the temperature difference (in °C) between column inlet and outlet. *α steps: the steps of the gradient profile (α = 0 ... linear change of temperature along column, α < 0 ... concave exponential profile, α > 0 ... convexe exponential profile). *p_in steps: the steps of the inlet pressure (in kPa(g)) *p_out steps: the steps of the outlet pressure (in kPa(a))\n\nWithout thermal gradient\n\nFor a default as a tuple of four strings the folwing fields will be shown in the widget:\n\nexample default tupel: default=(\"0 60 600 120\", \"40 40 300 300\", \"18 18 98 98\", \"vacuum\")\n\n*time steps: the time steps after which duration the values of temperature, inlet pressure, ΔT and α are achieved by linear interpolation (in s). *temperature steps: the temperature steps (in °C).  p_in steps: the steps of the inlet pressure (in kPa(g)) column outlet selection of the outlet of the colum, \"vacuum\" (p_out = 00 kPa(a)) or \"atmosphere\" (p_out = 1013 kPa(a)).\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.UI_Substance","category":"page"},{"location":"functions/#GasChromatographySimulator.UI_Substance","page":"Functions","title":"GasChromatographySimulator.UI_Substance","text":"UI_Substance(sol; default=(1:4, ))\n\nConstruct a combined PlutoUI widget for the settings of the substances separated in the simulated GC system with the selectable substances subs. \n\nDepending on the tupel of default the widget is setup. \n\nFor default = (1:4, 0.0, 0.0) the UI fields are:\n\nSelect Substances: Selection of the substances, which will be simulated, default selection = 1st to 4th substance.\nInjection time: Start time (in s) of the simulation. The same for all selected substances. Default is 0.0 s.\nInjection width: Peak width (in s) of all selected substances at the time of injection. Default is 0.0 s. \n\nFor default = (1:4,) the UI fields are:\n\nSelect Substances: Selection of the substances, which will be simulated, default selection = 1st to 4th substance. \n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.UI_Options","category":"page"},{"location":"functions/#GasChromatographySimulator.UI_Options","page":"Functions","title":"GasChromatographySimulator.UI_Options","text":"UI_Options()\n\nConstruct a combined PlutoUI widget for the settings of the options for the simulation.    \n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.setting_prog","category":"page"},{"location":"functions/#GasChromatographySimulator.setting_prog","page":"Functions","title":"GasChromatographySimulator.setting_prog","text":"setting_prog(prog_values)\n\nTranslates the Program parameters from a tuple defined by a PlutoUI widget into the structure GasChromatographySimulator.Program.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Helper-functions","page":"Functions","title":"Helper functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.temperature_interpolation","category":"page"},{"location":"functions/#GasChromatographySimulator.temperature_interpolation","page":"Functions","title":"GasChromatographySimulator.temperature_interpolation","text":"temperature_interpolation(time_steps, temp_steps, gradient_function, L)\n\nConstruct the temperature function depending on position x and time t.  \n\nArguments\n\ntime_steps::Array{<:Real,1}: Time steps in s (seconds). \ntemp_steps::Array{<:Real,1}: Temperature steps in °C (degree celsius).\ngf::Function: Gradient function gf(x, a_gf), describes the thermal gradient.\nL::Float64: Length of the capillary measured in m (meter).\n\nFor the spatial dependency of the interpolated temperature T_ipt(x,t) the gradient function gf is calculated every 1e-3 m (1 mm). Positions inbetween are linear interpolated. For the temporal dependency the temperatures temp_steps defined at the time_steps are linear interpolated over time t.   \n\nExamples\n\njulia> T_itp = temperature_interpolation([0.0, 60.0, 300.0, 120.0], [40.0, 40.0, 320.0, 320.0], gf, 10.0)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.steps_interpolation","category":"page"},{"location":"functions/#GasChromatographySimulator.steps_interpolation","page":"Functions","title":"GasChromatographySimulator.steps_interpolation","text":"steps_interpolation(time_steps, steps)\n\nConstruct a linear interpolated function depending on time t of the steps-values over time_steps.  \n\nArguments\n\ntime_steps::Array{<:Real,1}: Time steps in s (seconds). \nsteps::Array{<:Real,1}: steps, e.g. pressure or flow. \n\nExamples\n\njulia> pin_itp = steps_interpolation([0.0, 60.0, 300.0, 120.0], \n                                    [300000.0, 300000.0, 400000.0, 400000.0])\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.load_solute_database","category":"page"},{"location":"functions/#GasChromatographySimulator.load_solute_database","page":"Functions","title":"GasChromatographySimulator.load_solute_database","text":"load_solute_database(db, sp, gas, solutes, t₀, τ₀)\n\nLoad the data of solutes for the stationary phase sp and the mobile phase gas from the database db into an array of the structure Substance.\n\nArguments\n\ndb::DataFrame: DataFrame of the database. \nsp::String: Name of the stationary phase.\ngas::String: Name of the mobile phase.\nsolutes: Name of the solutes or the id number of the solutes (array of Integers). If id numbers are used, the dataframe of the database must include a column \"No\" with the id numbers.\nt₀::Array{Float64,1}: Initial start times of the solutes.\nτ₀::Array{Float64,1}: Initial peak widths of the solutes. \n\nExamples\n\njulia> sub = load_solute_database(db, \"DB5\", \"He\", [\"C10\", \"C11\"], [0.0, 0.0], [0.5, 0.5])\n\n\n\n\n\nload_solute_database(db_path, db, sp, gas, solutes, t₀, τ₀)\n\nLoad the data of solutes for the stationary phase sp and the mobile phase gas from the database file db (located in db_path) into an array of the structure Substance. THe row number of the selected solutes in the loaded database are added to the annotations of the Substance structure. \n\nArguments\n\ndb_path::String: Path to the database file.\ndb::String: Name of the database file. \nsp::String: Name of the stationary phase.\ngas::String: Name of the mobile phase.\nsolutes::Array{<:AbstractString,1}: Name of the solutes.\nt₀::Array{Float64,1}: Initial start times of the solutes.\nτ₀::Array{Float64,1}: Initial peak widths of the solutes. \n\nExamples\n\njulia> sub = load_solute_database(\"path/to/the/file\", \"db.csv\", \"DB5\", \"He\", [\"C10\", \"C11\"], [0.0, 0.0], [0.5, 0.5])\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.all_solutes","category":"page"},{"location":"functions/#GasChromatographySimulator.all_solutes","page":"Functions","title":"GasChromatographySimulator.all_solutes","text":"all_solutes(sp, db; id=false, separator=\" - \")\n\nExtract the name of all solutes for which data in a database db and the stationay phase sp is available. \n\nArguments\n\nsp: Name of the stationary phase.\ndb: DataFrame of the database.\nid: if true than the number of the solutes in the database are combined with the solute name. Default = false.\nseparator: string used to separate the solute number from the solute name. Default = \" - \". \n\nExamples\n\njulia> all = all_solutes(\"DB5\", db)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.diffusivity","category":"page"},{"location":"functions/#GasChromatographySimulator.diffusivity","page":"Functions","title":"GasChromatographySimulator.diffusivity","text":"diffusivity(M, Cn, Hn, On, Nn, Rn, gas)\n\nCalculate the diffusivity constant Cag of solute a in gas g using the emperical Fuller-Schettler-Giddings model [1].\n\n[1] Fuller, Edward N.; Ensley, Keith; Giddings, J. Calvin, Diffusion of Halogenated Hydrocarbons in Helium. The Effect of Structure on Collision Cross Sections, The Journal of Physical Chemistry, Volume 73, Issue 11, 1969, 3679–3685\n\nArguments\n\nM: Molar mass of the solute.\nCn: Number of carbon atoms of the solute.\nHn: Number of hydrogen atoms of the solute.\nOn: Number of oxygen atoms of the solute.\nNn: Number of nitrogen atoms of the solute.\nRn: Number of closed rings of the structure of the solute.\ngas: The name of the mobile phase. Allowed values: He, H2 or N2.\n\n\n\n\n\ndiffusivity(id, gas)\n\nCalculate the diffusivity constant Cag of solute id in gas gas using the emperical Fuller-Schettler-Giddings model [1], using the identifier of the solute id.\n\n[1] Fuller, Edward N.; Ensley, Keith; Giddings, J. Calvin, Diffusion of Halogenated Hydrocarbons in Helium. The Effect of Structure on Collision Cross Sections, The Journal of Physical Chemistry, Volume 73, Issue 11, 1969, 3679–3685\n\nArguments\n\nid: Named tupel identifying the solute. (Name, CAS, formula, MW, smiles)\ngas: The name of the mobile phase. Allowed values: He, H2 or N2.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.common","category":"page"},{"location":"functions/#GasChromatographySimulator.common","page":"Functions","title":"GasChromatographySimulator.common","text":"common(s_1, s_1)\n\nCompare two arrays and return the common elements.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.compare_peaklist","category":"page"},{"location":"functions/#GasChromatographySimulator.compare_peaklist","page":"Functions","title":"GasChromatographySimulator.compare_peaklist","text":"compare_peaklist(pl_1, pl_2)\n\nCompare two peaklists (results of GasChromatographySimulator.jl) and calculate absolute and relative differences of retention times and peak widths.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.compare_measurement_simulation","category":"page"},{"location":"functions/#GasChromatographySimulator.compare_measurement_simulation","page":"Functions","title":"GasChromatographySimulator.compare_measurement_simulation","text":"compare_measurement_simulation(meas, peaklist)\n\nCompare the retention times of measured and simulated substances.\n\nArguments\n\nmeas: DataFrame consisting at least of the columns :Name and :RT (measured retention time in s)\npeaklist: DataFrame as result from GasChromatographySimulator.jl with the columns :Name and :tR (simulated retention time in s).\n\nThe comparison is done by searching the same Name of the substance in both DataFrames and calculating the absolute difference of the retention times (in s) and the relative difference (in %).\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.conventional_program(CP; time_unit=\"min\")","category":"page"},{"location":"functions/#GasChromatographySimulator.conventional_program-Tuple{Any}","page":"Functions","title":"GasChromatographySimulator.conventional_program","text":"conventional_program(CP; time_unit=\"min\")\n\nTranslate the conventional program notation into a vector of time steps and value steps (temperature, pressure, flow) used in GasChromatographySimulator.Program\n\nThe conventional temperature program is defined as an array of the following form (for a temperature program): CP = [T₁, t₁, r₁, T₂, t₂, r₂, T₃, t₃, ...] corresponding to the notation: T₁(t₁) - r₁ - T₂(t₂) - r₂ - T₃(t₃) - ... which can be read as: Starting temperature T₁ is holded for time t₁. After the holding time the temperature increases linearly with the heating rate r₁, until temperature T₂ is reached. This temperature is held for the time t₂ after which the temperature increases linearly by the heating rate r₂ until temperature T₃ is reached, which is hold for the time t₃, and so on. \n\nThe option time_unit determines the unit of time in the program CP. For time_unit = \"min\" (default) the times are measured in minutes and the heating rates in °C/min. For time_unit = \"s\" the times are measured in seconds and the heating rate in °C/s. \n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.temperature_program(time_steps, value_steps; time_unit=\"min\")","category":"page"},{"location":"functions/#GasChromatographySimulator.temperature_program-Tuple{Any, Any}","page":"Functions","title":"GasChromatographySimulator.temperature_program","text":"temperature_program(time_steps, value_steps; time_unit=\"min\")\n\nTranslate the vector of time steps and value steps (temperature, pressure, flow) into a conventional program notation.\n\nThe conventional temperature program is defined as an array of the following form (for a temperature program): CP = [T₁, t₁, r₁, T₂, t₂, r₂, T₃, t₃, ...] corresponding to the notation: T₁(t₁) - r₁ - T₂(t₂) - r₂ - T₃(t₃) - ... which can be read as: Starting temperature T₁ is holded for time t₁. After the holding time the temperature increases linearly with the heating rate r₁, until temperature T₂ is reached. This temperature is held for the time t₂ after which the temperature increases linearly by the heating rate r₂ until temperature T₃ is reached, which is hold for the time t₃, and so on. \n\nThe option time_unit determines the unit of time in the program CP. For time_unit = \"min\" (default) the times are measured in minutes and the heating rates in °C/min. For time_unit = \"s\" the times are measured in seconds and the heating rate in °C/s. \n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.common_time_steps","category":"page"},{"location":"functions/#GasChromatographySimulator.common_time_steps","page":"Functions","title":"GasChromatographySimulator.common_time_steps","text":"common_time_steps(time_steps_1, time_steps_2)\n\nEstimate a new set of time steps, which represents the combination of time_steps_1 and time_steps_2.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.new_value_steps","category":"page"},{"location":"functions/#GasChromatographySimulator.new_value_steps","page":"Functions","title":"GasChromatographySimulator.new_value_steps","text":"new_value_steps(value_steps, time_steps, new_time_steps)\n\nEstimate the new value steps at the new_time_steps from the original set of value_steps over time_steps. The new values at new time steps are calculated from a linear change of the value between the original time steps.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"[1] Rackauckas, Christopher and Nie, Qing. Differentialequations.jl - a performant and feature-rich ecosystem for solving differential equations in julia. Journal of Open Research Software (2017). DOI: http://doi.org/10.5334/jors.151, https://github.com/SciML/DifferentialEquations.jl","category":"page"},{"location":"references/","page":"References","title":"References","text":"[2] Interpolations.jl https://github.com/JuliaMath/Interpolations.jl","category":"page"},{"location":"references/","page":"References","title":"References","text":"[3] Johnson, Steven G. QuadGK.jl: Gauss-Kronrod integration in Julia. https://github.com/JuliaMath/QuadGK.jl","category":"page"},{"location":"references/","page":"References","title":"References","text":"[4] Revels, J.; Lubin, M. and Papamarkou, T. Forward-Mode Automatic Differentiation in Julia. arXiv:1607:07892 (2016). https://github.com/JuliaDiff/ForwardDiff.jl ","category":"page"},{"location":"references/","page":"References","title":"References","text":"[5] Pluto.jl https://github.com/fonsp/Pluto.jl","category":"page"},{"location":"references/","page":"References","title":"References","text":"[6] Blumberg, Leonid M. Distribution-centric 3-parameter thermodynamic models of partition gas chromatography. Journal of Chromatography A (2017). DOI: http://10.1016/j.chroma.2017.02.047","category":"page"},{"location":"references/","page":"References","title":"References","text":"[7] Blumberg, Leonid M. Temperature-Programmed Gas Chromatography. Wiley-VCH (2010).","category":"page"},{"location":"references/","page":"References","title":"References","text":"[8] Leppert, Jan; Müller, Peter J.; Chopra, Miriam D.; Blumberg, Leonid M. and Boeker, Peter. Simulation of spatial thermal gradient gas chromatography. Journal of Chromatography A (2020). DOI: http://10.1016/j.chroma.2020.460985","category":"page"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In the following section the general usage and setup of the simulation is explained. ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"A GC-system for the simulation is defined by four sets of parameters:","category":"page"},{"location":"usage/#Option-parameters","page":"Usage","title":"Option parameters","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"A fourth set of parameters, GasChromatographySimulator.Options, holds additional options used in the simulation with the following arguments:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"alg: The algorithm used for the ODE solver. The algorithms OwrenZen3(), OwrenZen4() and OwrenZen5() are recommended.\nabstol: The absolute tolerance for the ODE solver. Recommended value 1e-6 to 1e-8.\nreltol: The relative tolerance for the ODE solver. Recommended value 1e-3 to 1e-5. \nTcontrol: Option defining at which point of the column the temperature program is calculated. The options are inlet (x=0) and outlet (x=L).\nodesys: Combine the ODEs for migration and peak-width into a system of ODEs (odesys = true) or solve the two ODEs separately (odesys = false).\nng: Option to calculate the simulation without a gradient (ng = true, uniform T, d and df) or with a gradient (ng = false, non-uniform T, d and/or df). \nvis: Used model of viscosity. HP is a model taken from the HP flow calculator with a linear temperature dependency of the viscosity. Blumberg is an emperical formula according to the book [7]\ncontrol: Control of the \"Flow\" or of the \"Pressure\" (at column inlet) during the program","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The default options can be initialized by calling:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using GasChromatographySimulator # hide\nopt = GasChromatographySimulator.Options()","category":"page"},{"location":"usage/#GC-Column-parameters","page":"Usage","title":"GC Column parameters","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"A GC column is defined by the dimensions of the column, length L, diameter d and film thickness of the stationary phase df, all measured in meters, the name of the stationary phase and the name of the mobile phase (with the allowed values \"He\", \"H2\" and \"N2\").","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: GC-column)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"These values are collected in the type structure GasChromatographySimulator.Column, which allows to define a function depending on column position x of the diameter d(x, a_d) and film thickness df(x, a_df), where a_d, resp. a_df are parameters of the function.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The following method constructs the Column structure col with an uniform diameter and uniform film thickness:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"col = GasChromatographySimulator.Column(10.0, 0.25e-3, 0.25e-6, \"SPB50\", \"He\")\nnothing # hide","category":"page"},{"location":"usage/#Program-parameters","page":"Usage","title":"Program parameters","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The program for a GC separation is defined by a temperature program T(t) and a pressure program. Typically (option control = \"Pressure\") the inlet pressure is controlled over time p_in(t) and the outlet pressure is constant, but here the outlet pressure can also be a function of time p_out(t). It is also possible to control the flow F(t) through the column (option control = Flow) instead of the inlet pressure. In this case the values of the flow (in m³/s) replace the values of the inlet pressure in the following definitions. In addition a thermal gradient can be applied, where the temperature of the GC column changes depending on position x on the column.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The program parameters are collected in the type structure GasChromatographySimulator.Program.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Different methods exist to construct the Program structure, depending on the usage of a thermal gradient. In two examples the definition of the program parameters will be explained.","category":"page"},{"location":"usage/#Without-thermal-gradient","page":"Usage","title":"Without thermal gradient","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Without a thermal gradientthe temperature is the same at every column position (uniform) at the same time. This is the normal case for conventional GC. One example of such a program can be achieved by the following method GasChromatographySimulator.Program(time_steps, temp_steps, pin_steps, pout_steps, L), which constructs the Program structure:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"prog = GasChromatographySimulator.Program(  [0.0, 60.0, 600.0, 120.0],\n                                            [40.0, 40.0, 300.0, 300.0],\n                                            [18.0, 18.0, 98.0, 98.0].*1000.0 .+ 101300.0,\n                                            101300.0.*ones(4),\n                                            col.L)\nnothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The first array time_steps defines the time steps (in s), the second array temp_steps defines the temperatures (in °C) at these time steps, the third and fourth array (pin_steps and pout_steps; resp. F_steps and pout_steps if the option control = \"Flow\") define the inlet and outlet pressures (both in Pa(absolute)) at the time steps. The values of temperature and pressures change linearly between the values defined at the time steps. The following picture shows the resulting temperature and pressure program:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: Program without thermal gradient)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The first time step is always zero (t₁ = 0.0 s) and the following time steps define the time that passes until the next step. In the example the second time step is t₂ = 60 seconds long and in this time the temperature stays constant at 40°C. With the next time step (t₃ = 600 s) the temperature changes from T₂ = 40°C linearly to T₃ = 300°C. In the last time step (t₄ = 120 s) the temperature is again kept constant at 300°C. The pressure program is defined in the same way. The inlet pressure changes similarly at the time steps, while the outlet pressure is constant.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The four arrays for time steps, temperatures and the two pressures (or flow and outlet pressure) must have the same number of elements, otherwise the construction of the Program structure gives an error message. Complex programs with several different heating ramps and temperature plateaus, as well as programed pressures, e.g. pressure pulses, can be realized by adding the temperature/pressure values at additional time steps. ","category":"page"},{"location":"usage/#Conventional-program-notation","page":"Usage","title":"Conventional program notation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In the control software of most commercial gas chromatographs the program is defined by temperature levels T_i, holding times t_i of the temperature levels and heating ramps r_i between the temperature levels. These programs can be written for a program with n temperature levels and n-1 heating ramps as:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"T_1(t_1) - r_1 - T_2(t_2) - r_2 - T_3(t_3) -  - r_n-1 - T_n(t_n)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"With the function GasChromatographySimulator.conventional_program such a conventional program notation can be translated into the program notation used in this simulation. Hereby is CP a vector of the form [T₁, t₁, r₁, T₂, t₂, r₂, T₃, t₃, ...].","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"CP = [40.0, 1.0, 5.0, 280.0, 2.0, 20.0, 320.0, 2.0]\nts, Ts = GasChromatographySimulator.conventional_program(CP)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"With the function GasChromatographySimulator.temperature_program(time_steps, value_steps; time_unit=\"min\") the used program with time steps and temperature steps can be translated into the conventional program notation.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"TP = GasChromatographySimulator.temperature_program(ts, Ts; time_unit=\"min\")","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"These functions can also be used for the notation of other programs, e.g. programs of the inlet pressure.","category":"page"},{"location":"usage/#Thermal-gradient","page":"Usage","title":"Thermal gradient","text":"","category":"section"},{"location":"usage/#Predefined-gradient-function","page":"Usage","title":"Predefined gradient function","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In the following text the expression temperature program means the change of the temperature with time t (dynamic), while the expression temperature gradient means the change of the temperature with column position x (non-uniform).","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In addition to a linear temperature and pressure program , a temperature gradient can be defined. Using the method GasChromatographySimulator.Program(time_steps, temp_steps, pin_steps, pout_steps, a_gf, Tcontrol, L) a pre-defined temperature function gf(x) is used to set the GC program.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"prog_g = GasChromatographySimulator.Program([0.0, 60.0, 150.0, 150.0, 120.0],\n                                            [40.0, 40.0, 170.0, 300.0, 300.0],\n                                            150000.0.*ones(5),\n                                            101300.0.*ones(5),\n                                            [[0.0, 0.0, 60.0, 60.0, 20.0] zeros(5) col.L.*ones(5) [0.0, 0.0, -2.0, -5.0, -5.0]],\n                                            \"inlet\",\n                                            col.L)\nnothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Similar to the setup before, the arrays time_steps, temp_steps, pin_steps (resp. F_steps, if option control = \"Flow\") and pout_steps are used. Added are the the array a_gf, containing the parameters for the temperature function gf(x) and the option Tcontrol (with options \"inlet\" and \"outlet\"), which defines at which position of the column the temperature program is defined (Tcontrol = \"inlet\" ... temperature program defined at x=0; Tcontrol=\"outlet\" ... temperature program defined at x=L). The following picture shows the resulting temperature program at the column inlet and outlet:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: Program with thermal gradient)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The parameters of the pre-defined gradient function gf(x) consists of four arrays with the same length as the array time_steps. These four arrays represent four different parameters:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"ΔT ... the temperature difference between x = x₀ and x = x₀ + L₀\nx₀ ... the start position, typically x₀ = 0.0\nL₀ ... the distance from the start position, typically L₀ = L\nα ... the gradient profile factor","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The form of the gradient function can change over time. For every parameter the same number of values as the number of time_steps are defined and different gradient functions at the different time_steps are defined. For times between the time_steps the gradient function at a fixed position changes linearly in time between the values at the surrounding time_steps. ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The pre-defined gradient function distinguishes two cases for the gradient profile factor. For α<=0 it is defined as","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"gf(x) = ΔT  left( 1 - expleft(α left( 1 - fracx - x_0L_0right)right) + left(1 - fracx - x_0L_0right) exp(α)right)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"For α>0 it is defined as","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"gf(x) = ΔT  left(expleft(-α fracx - x_0L_0right) - fracx - x_0L_0exp(-α)right)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The following graph shows different gradient functions for different profile factors α (ΔT = 50°C, x₀ = 0.0m and L₀ = 10.0m). ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: Temperature gradient with different profile factors)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"For α=0 a linear change of the temperature along the column is achieved. For negative α-values the gradient has a concave profile, with small changes of the temperature near the inlet and great changes towards the outlet. For positive α-values the gradient has a convex profile, with great changes near the inlet and small changes towards the outlet.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"From the parameters time_steps, temp_steps, a_gf and gradient function gf(x) the temperature at every position x and every time t is linearly interpolated in a function T_itp(x,t), which is stored in the GasChromatographySimulator.Program structure. The parameters time_steps and pin_steps, resp. pout_steps, are used to construct the linear interpolated pressure function in time pin_itp(t), resp. pout_itp(t). These interpolated functions are used throughout the simulation.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In the section Self-defined gradient function in Notes an example for a user defined gradient function is shown.","category":"page"},{"location":"usage/#Substance-parameters","page":"Usage","title":"Substance parameters","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"A third set of parameters, GasChromatographySimulator.Substance, is used to store the informations about the substances which are separated in the simulated GC-run. The stored information are the name, the CAS-number, three thermodynamic parameters (Tchar θchar ΔCp, see also [6]), the dimensionless film thickness (df/d) of the Column for which the thermodynamic parameters were estimated, the diffusivity (calculated from the molecular formula, number of rings in the molecule and mol mass, which are extracted using ChemicalIdentifiers.jl from an external database), the injection time and initial peak width. For several substances an array of the type GasChromatographySimulator.Substance is used.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"With the function GasChromatographySimulator.load_solute_database the data for selected substances and a selected stationary phase is loaded from an external database (a .csv-file).","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"stat_phase = col.sp\nsolutes = [\"C10\", \"C11\", \"C12\", \"2-Octanol\", \"2-Octanone\"]\nt₀ = zeros(length(solutes))\nτ₀ = zeros(length(solutes))\nsub = GasChromatographySimulator.load_solute_database(\"../../data\", \"Database_test.csv\", \n                                                        stat_phase,\n                                                        col.gas,\n                                                        solutes,\n                                                        t₀,\n                                                        τ₀)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"An example database Database_test.csv with thermodynamic data from [6] can be found in the folder /data of this github project, see also Database.","category":"page"},{"location":"usage/#Combining-the-parameters","page":"Usage","title":"Combining the parameters","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The four sets of parameters defining the simulation are collected in the type structure GasChromatographySimulator.Parameters. All information for the simulation are contained in this structure.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"par_g = GasChromatographySimulator.Parameters(col, prog_g, sub, opt) \nnothing # hide","category":"page"},{"location":"usage/#Run-the-simulation-and-evaluate-the-results","page":"Usage","title":"Run the simulation and evaluate the results","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The GC-system is simulated by numerically solving two ordinary differential equations (ODE):","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The first ODE describes the migration t(x) of a substance through the GC column with the velocity u(xt):","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"fracdtdx = frac1u(xt)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The second ODE describes the development of the temporal peak variance tau^2(xt(x)) during the migration:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"fracdτ^2dx = H(x t(x)) r(x t(x)) + 2 τ^2(x t(x)) fracrt(xt(x))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Hereby is r(xt) the inverse velocity of the substance (1u(xt), also called residency) and H(xt) is the local plate height. For more information about the physical model see the docstrings of the physical model and the references [7] and [8].","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"With the argument odesys of GasChromatographySimulator.Options the two differential equations can be solved as a system of ODEs (odesys = true) or separately, using the solution of the first ODE to solve the second ODE (odesys = false).   ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"With the function GasChromatographySimulator.simulate the simulation is initiated.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"An example of the above defined GC Column col, with a temperature gradient program prog_g, the five substances sub and the default options opt (collected in the parameters par_g) is simulated by ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"peaklist, sol = GasChromatographySimulator.simulate(par_g)\nnothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The simulation gives two resulting quantities. In the peaklist the general results of the simulated GC-run are presented in a DataFrame:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"peaklist # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Name          ... name of the substance\ntR            ... retention time in s\nτR            ... peak width at retention time in s\nTR            ... elution temperature (temperature of the column outlet at retention time) \nσR            ... band width at retention time in m\nuR            ... velocity of the substance at retention time in m/s\nkR            ... retention factor at retention time\nRes           ... resolution between the substance and its following neighbor\nΔs            ... separation metric between the substance and its following neighbor","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"From the peaklist a chromatogram can be calculated (gaussian peak form with the same area are assumed) and plotted:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Plots; gr() # hide\np_chrom, t, abundance = GasChromatographySimulator.plot_chromatogram(peaklist, (100.0, 200.0))\nsavefig(p_chrom, \"plot_chromatogram.png\"); nothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: )","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The solution of the ODEs are stored in sol as an array of solutions from the DifferentialEquations.jl package. The solution for the first substance (C10) is:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"sol[1] # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Herby is sol[1].t the position x along the column and sol[1].u consists of an array of the corresponding time t and peak variance τ².","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The solution t(x) can be plotted by","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"p_tx = plot(sol[1], vars=1)\nsavefig(p_tx, \"plot_tx.png\"); nothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: )","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The solution τ²(x) can be plotted by","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"p_τ²x = plot(sol[1], vars=2)\nsavefig(p_τ²x, \"plot_tau2x.png\"); nothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: )","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The function GasChromatographySimulator.local_plots can be used to plot different quantities, e.g. position x, time t, peak width τ, (spatial) band width σ, velocity of the substance u or the temperature at the position of the substance T.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"p_σ_t = GasChromatographySimulator.local_plots(\"t\", \"σ\", sol, par_g)\nsavefig(p_σ_t, \"plot_sigma_t.png\"); nothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: )","category":"page"},{"location":"usage/#Notes","page":"Usage","title":"Notes","text":"","category":"section"},{"location":"usage/#Self-defined-gradient-function","page":"Usage","title":"Self-defined gradient function","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"It is possible to define other gradient function beside the pre-defined function above. The following example shows the construction of the GasChromatographySimulator.Program structure with a sin function with a changing period over the time of the program:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"L = 10.0\ntime_steps = [0.0, 60.0, 150.0, 150.0, 120.0]\ntemp_steps = [40.0, 60.0, 170.0, 300.0, 350.0]\npin_steps = 150000.0.*ones(length(time_steps))\npout_steps = zeros(length(time_steps))\na_gf = [[10.0, 10.0, 30.0, 30.0, 10.0] [1.0, 1.0, 1.0, 2.0, 4.0]]\ngradient_function(x) = a_gf[:,1].*sin.(a_gf[:,2].*2*π/L*x)\nT_itp = GasChromatographySimulator.temperature_interpolation(time_steps, temp_steps, gradient_function, L)\npin_itp = GasChromatographySimulator.pressure_interpolation(time_steps, pin_steps)\npout_itp = GasChromatographySimulator.pressure_interpolation(time_steps, pout_steps)\nprog = GasChromatographySimulator.Program(time_steps, temp_steps, pin_steps, pout_steps, gradient_function, a_gf, T_itp, pin_itp, pout_itp)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"This program results in the following gradient.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: self-defined thermal gradient)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The solid lines show the defined gradient functions at the five time_steps. The two dashed lines show the gradient at two different times between the third and fourth time_steps. They show the transition between the two defined functions.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Note: Not fully tested yet.","category":"page"},{"location":"usage/#Database","page":"Usage","title":"Database","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The layout of the database in the .csv-file is shown here:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using DataFrames, CSV # hide\ndb = DataFrame(CSV.File(\"../../data/Database_test.csv\", header=1, silencewarnings=true, limit=3))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"It consists of 14 different columns:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Name          ... name of the substance\nCAS           ... CAS number for unique identification of the substance\nPhase         ... name of the stationary phase which corresponds to the thermodynamic parameters\nTchar         ... the first thermodynamic parameter in °C\nthetachar     ... the second thermodynamic parameter in °C\nDeltaCp       ... the third thermodynamic parameter in J mol⁻¹ K⁻¹\nphi0          ... the dimensionless film thickness (df/d) for which the thermodynamic parameters were estimated\nSource        ... a note, e.g. reference for the thermodynamic parameters\nCat           ... a number of columns with optional names for categories of the substances","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Notebooks","page":"Examples","title":"Notebooks","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In the folder notebooks several notebooks, using Pluto.jl, for the simulation of GC-systems are available. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"To use these notebooks Julia, v1.6 or above, must be installed and Pluto must be added:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> ]\n(v1.7) pkg> add Pluto","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"To run Pluto, use the following commands:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> using Pluto\njulia> Pluto.run()","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Pluto will open your browser. In the field Open from file the URL of a notebook or the path to a locally downloaded notebook can be insert and the notebook will open and load the necessary packages. ","category":"page"},{"location":"examples/#Overview-of-notebooks","page":"Examples","title":"Overview of notebooks","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"simulation_conventional_GC.jl - Simulation of a conventional GC-system (constant temperature, constant diameter and constant film thickness along the column) and outlet pressure as \"vacuum\" or \"atmospheric\", with option of flow or pressure control and temperature program notation in the typical form used in commercial GC software (temperature levels, holding times and heating ramps). Results can be exported.\nsimulation_conventional_GC_TL.jl - Simulation of a conventional GC-system (constant temperature, constant diameter and constant film thickness along the column) with an attached transfer line (at a fixed temperature) and outlet pressure as \"vacuum\" or \"atmospheric\", with option of flow or pressure control and temperature program notation in the typical form used in commercial GC software (temperature levels, holding times and heating ramps). Results can be exported. \nsimulation_conventional_GC_load_2dbs.jl - Simulation of a conventional GC-system (constant temperature, constant diameter and constant film thickness along the column) and loading of up to two different substance databases and simulation of the common substances with the same GC-system and comparing the result. Also, an option is given, to load measured retention times and compare these to the simulations. Same setting for programs as in simulation_conventional_GC.jl\nsimulation_example.jl - General example of simulation of a GC-system with optional thermal gradient (exponential/linear model of temperature change along the column) and constant diameter and constant film thickness along the column. Results can be exported. \nsimulation_example_input_gradient_function.jl - Simulation of a GC-system with optional thermal gradient where the temperature change along the column is defined by a user-defined equation (cosine-function as example).","category":"page"},{"location":"examples/#Simulation-of-measurements","page":"Examples","title":"Simulation of measurements","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Two measurements from [8] will be simulated and compared to the measured chromatograms. The n-alkanes from n-nonane (C9) to n-triacontane (C30) are separated in a conventional GC and a thermal gradient GC . The database with the thermodynamic parameters is Database_Leppert2020b.csv.","category":"page"},{"location":"examples/#Conventional-GC","page":"Examples","title":"Conventional GC","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The conventional GC program simulated here is Prog. D from [8], a temperature program with two heating ramps, constant inlet pressure and a flame ionization detector (FID, atmospheric outlet pressure). ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The standard options are used, beside the option ng (non-gradient) is changed to true. Because the conventional GC does not use non-uniform temperature, diameter or film thickness, the model can be simplified and the calculation of the separation is faster.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GasChromatographySimulator # hide\nusing DataFrames, CSV # hide\nusing Plots # hide\nopt = GasChromatographySimulator.Options(ng=true)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The column has a length of 11.18 m, a diameter of 0.104 mm and a film thickness of 0.104 µm. The stationary phase is labeled as FS5ms and the mobile phase gas is helium:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"col = GasChromatographySimulator.Column(11.18, 0.104e-3, 0.104e-6, \"FS5ms\", \"H2\");","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The temperature program starts at 40°C, which is hold for 1 min. The column is heated up to 180°C in 28 min (5°C/min heating ramp), where the temperature is also hold for 1min. Than the column is heated to 300°C in 6 min (20°C/min heating ramp), where the temperature again is kept for 1 min. The inlet pressure is at constant 411564 Pa (absolute) and the outlet pressure is at constant 101300 Pa (absolute) during the program.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"prog_D = GasChromatographySimulator.Program([0.0, 60.0, 1680.0, 60.0, 360.0, 60.0], [40.0, 40.0, 180.0, 180.0, 300.0, 300.0], 411564.0*ones(6), 101300.0.*ones(6), col.L);","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We want to use all solutes for the stationary phase FS5ms, which are in the database Database_Leppert2020b.csv. We load the database into a dataframe:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"db_dataframe = DataFrame(CSV.File(\"../../data/Leppert2020b/Database_Leppert2020b.csv\", header=1, silencewarnings=true));","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"and extract all the names of the substances with:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"solutes = GasChromatographySimulator.all_solutes(col.sp, db_dataframe);","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The injection is assumed to be ideal with initial peak widths τ₀ of 0 seconds and occuring at the beginning of the temperature program (t₀ of 0 seconds). The data for all solutes is finally loaded with:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"t₀ = zeros(length(solutes))\nτ₀ = zeros(length(solutes))\nsub = GasChromatographySimulator.load_solute_database(db_dataframe, col.sp, col.gas, solutes, t₀, τ₀)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The parameters are combined:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"par = GasChromatographySimulator.Parameters(col, prog_D, sub, opt);","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The temperature program and the pressure/flow program can be plotted:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"p_flow = GasChromatographySimulator.plot_flow(par)\np_press = GasChromatographySimulator.plot_pressure(par)\np_temp = GasChromatographySimulator.plot_temperature(par)\nl = @layout([a{0.65w} [b; c]])\np_TpF = plot(p_temp, p_press, p_flow, layout=l)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The temperatures at the column inlet and outlet are identical, the temperature along the colum is uniform. With the temperature program and the constant pressures, the flow decreases during the temperature program.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Finally, the simulation is executed:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"peaklist, sol = GasChromatographySimulator.simulate(par);","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We know can compare the simulation results with the measured chromatogram. The file Leppert2020b_measured_RT_progD.csv contains the retention times and peak widths (as standard deviations) from the measurement.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"measurement_D = DataFrame(CSV.File(\"../../data/Leppert2020b/Leppert2020b_measured_RT_progD.csv\", header=1, silencewarnings=true));\nmeasurement_D[!, 2] = measurement_D[!, 2] .* 60.0; # conversion from min -> s\nrename!(measurement_D, [:Name, :tR, :τR]);","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The simulated and measured separations can be compared by comparing the peak lists:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"compare = GasChromatographySimulator.compare_peaklist(measurement_D, peaklist)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Differences between measured and simulated retention times are in the range of some seconds, while the retention times are in minutes. Most differences are below 1%. The measured peak widths are 10 to 15% higher than the calculated peak widths.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The measured and simulated separation can also be compared by a plot of the chromatograms:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"chrom_D = DataFrame(CSV.File(\"../../data/Leppert2020b/Leppert2020b_measured_Chrom_progD.csv\", header=1, silencewarnings=true))\np_chrom, t, chrom = GasChromatographySimulator.plot_chromatogram(peaklist, (0.0, round(chrom_D[end,1];sigdigits=2)); annotation=false, number=true, mirror=true, offset=0.0)\nplot!(p_chrom, chrom_D[!,1], chrom_D[!,2].*400.0.+0.1)\nylims!(-1.6,1.6)\nxlims!(0.0,round(chrom_D[end,1];sigdigits=2))\np_chrom","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The measured chromatogram is plotted in orange, while the simulated chromatogram is plotted in blue and mirrored.","category":"page"},{"location":"examples/#Thermal-gradient-GC","page":"Examples","title":"Thermal gradient GC","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The following example of a thermal gradient GC is the example medium gradient from [8]. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Standard options are used (here the option ng has to be false):","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"opt_tg = GasChromatographySimulator.Options()","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"And the column is 2.05 m long and has the same diameter, film thickness and stationary phase as in the example before. Here Helium is used as mobile phase.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"col_tg = GasChromatographySimulator.Column(2.05, 0.104e-3, 0.104e-6, \"FS5ms\", \"He\");","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The program is taken from the measured temperatures and pressures during the GC run, stored in the file Leppert2020b_prog_settings_med_gradient_x90.csv.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"prog_settings = DataFrame(CSV.File(\"../../data/Leppert2020b/Leppert2020b_prog_settings_med_gradient_x90.csv\", header=1, silencewarnings=true));","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We do not need the measured temperatures and pressures at such a high measurement rate (every 40 to 50 ms). Only every 20th measurement point is used to re-construct the temperature and pressure program. The curvature factor α is set to a value of -3.0, based on separate measurements of the temperature profile along the column.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# use only every 20th measurement\ntime = cumsum(prog_settings.Deltat)[1:20:end]\ntime_steps = Array{Float64}(undef, length(time))\nfor i=2:length(time)\n    time_steps[i] = time[i]-time[i-1]\nend\ntime_steps[1] = 0.0\ntemp_steps = prog_settings.T[1:20:end]\nΔT_steps = prog_settings.DeltaT[1:20:end]\npin_steps = prog_settings.pinj[1:20:end].*1000.0 .+ 101300.0\npout_steps = prog_settings.pdet[1:20:end].*1000.0\nα_steps = -3.0.*ones(length(ΔT_steps))\nx₀_steps = zeros(length(ΔT_steps))\nL₀_steps = col_tg.L.*ones(length(ΔT_steps))\nprog_med_grad = GasChromatographySimulator.Program(time_steps, temp_steps, pin_steps, pout_steps, ΔT_steps, x₀_steps, L₀_steps, α_steps, \"outlet\", col_tg.L);","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The same solutes sub are used as in the previous example.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The parameters are combined:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"par_tg = GasChromatographySimulator.Parameters(col_tg, prog_med_grad, sub, opt_tg);","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The temperature program and the pressure/flow program can be plotted:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"p_flow_tg = GasChromatographySimulator.plot_flow(par_tg)\np_press_tg = GasChromatographySimulator.plot_pressure(par_tg)\np_temp_tg = GasChromatographySimulator.plot_temperature(par_tg)\nl = @layout([a{0.65w} [b; c]])\np_TpF_tg = plot(p_temp_tg, p_press_tg, p_flow_tg, layout=l)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The temperature at the outlet side of the column is programmed linearly starting with 50°C (hold for 10 s), heating to 370°C in 60 s (heating ramp of 5.33°C/s). During this heating ramp the temperature at the inlet side of the column is heated faster, resulting in an increasing temperature difference, until around 40 s where the temperature at the inlet increases slower than on the outlet resulting in an decreasing temperature difference.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Finally the simulation is run by:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"peaklist_tg, sol_tg = GasChromatographySimulator.simulate(par_tg);","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The file Leppert2020b_measured_RT_med_gradient.csv contains the retention times and peak widths (as standard deviations) from the measured chromatogram.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"measurement_tg = DataFrame(CSV.File(\"../../data/Leppert2020b/Leppert2020b_measured_RT_med_gradient.csv\", header=1, silencewarnings=true));\nmeasurement_tg[!, 3] = measurement_tg[!, 3] ./ 1000.0; # conversion from ms -> s\nrename!(measurement_tg, [:Name, :tR, :τR]);","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The simulated and measured separations can be compared by comparing the peak lists:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"compare_tg = GasChromatographySimulator.compare_peaklist(measurement_tg, peaklist_tg)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Differences in retention times are below 1 s, while the retention times are in the range of several seconds. Relative retention time differences are below 4%. The peak widths on the other hand are partly more than 50% higher in the measurement than in the simulation. Main reasons are peak broadening effects outside the scope of this simulation, e.g. extra-column broadening (in the detector) and asymmetric peak broadening (tailing of the peaks, especially for the later substances).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The measured and simulated separation can also be compared by a plot of the chromatograms:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"chrom_tg = DataFrame(CSV.File(\"../../data/Leppert2020b/Leppert2020b_measured_Chrom_med_gradient_x90.csv\", header=1, silencewarnings=true))\np_chrom_tg, t_, chrom_ = GasChromatographySimulator.plot_chromatogram(peaklist_tg, (0.0, 55.0); annotation=false, number=true, mirror=true, offset=0.0)\nplot!(p_chrom_tg, chrom_tg[!,1].*60.0, chrom_tg[!,2].*8e-5)\nylims!(-13,13)\nxlims!(0.0,55.0)\np_chrom_tg","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The measured chromatogram is plotted in orange, while the simulated chromatogram is plotted in blue and mirrored.","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"To use GasChromatographicSimulator.jl, you need to install Julia 1.6 or greater first (official Julia website) and than add the package:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> ] add GasChromatographySimulator","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"To use the package type:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> using GasChromatographySimulator","category":"page"},{"location":"#GasChromatographySimulator.jl-Documentation","page":"Home","title":"GasChromatographySimulator.jl Documentation","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package GasChromatographySimulator.jl simulates the separation of different substances (solutes) in a gas chromatographic (GC) system. The simulation uses ordinary differential equations (ODE) to model the migration t(x) of a solute through the GC system and the development of the peak variance during this migration τ²(x).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Beside a temperature program (change of the temperature of the GC-system with time T(t)) and a pressure/flow program (change of inlet p_i(t) and/or outlet pressure p_o(t) with time, resp. change of the flow with time F(t)), a thermal gradient (non-uniform change of the temperature along the GC column, T(x)) can be added. Also a non-uniform thickness of the stationary phase d_f(x) and a non-uniform column diameter d(x) can be defined. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The interaction between the substances and the stationary phase of the GC-system is described by a thermodynamic model (K-centric thermodynamic parameters [6])","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Chromatogram)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For further details see [8].","category":"page"},{"location":"","page":"Home","title":"Home","text":"The simulation uses the following packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"OrdinaryDiffEq.jl part of DifferentialEquations.jl\nInterpolations.jl\nIntegrals.jl\nForwardDiff.jl\nChemicalIdentifiers.jl\nPluto.jl","category":"page"},{"location":"#Contribution","page":"Home","title":"Contribution","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please open an issue if you:","category":"page"},{"location":"","page":"Home","title":"Home","text":"want to report a bug \nhave problems using the package (please first look at the documentation)\nhave ideas for new features or ways to improve the usage of this package ","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can contribute (e.g. fix bugs, add new features, add to the documentation) to this package by Pull Request: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"first discuss your contributions in a new issue\nensure that all tests pass locally before starting the pull request\nnew features should be included in runtests.jl\nadd description to the pull request, link to corresponding issues by # and issue number\nthe pull request will be reviewed","category":"page"},{"location":"#Content","page":"Home","title":"Content","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The manual is structured as followed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"installation.md\",\n    \"usage.md\",\n    \"examples.md\",\n    \"functions.md\",\n    \"references.md\"\n    ]\nDepth = 2","category":"page"}]
}
