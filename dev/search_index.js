var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.System","category":"page"},{"location":"functions/#GasChromatographySimulator.System","page":"Functions","title":"GasChromatographySimulator.System","text":"System(L, d, a_d, df, a_df, sp, gas)\n\nStructure describing the GC system. \n\nArguments\n\nL: Length of the capillary measured in m (meter)\nd: A function d(x, a_d) of x, the position along the capillary, describing the diameter in m (meter).\na_d: Parameters of the diameter function. \nd_f: A function d_f(x, a_df) of x, describing the film thickness in m (meter).\nsp: The name of the stationary phase.\ngas: The name of the mobile phase. Allowed values: He, H2 or N2.\n\n\n\n\n\n","category":"type"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.System(L, d, df, sp, gas)","category":"page"},{"location":"functions/#GasChromatographySimulator.System-NTuple{5, Any}","page":"Functions","title":"GasChromatographySimulator.System","text":"System(L, d, df, sp, gas)\n\nConstruct the structure Systems with given values for the case of constant diameter d and film thickness df. \n\nArguments\n\nL: Length of the capillary measured in m (meter).\nd: Diameter of the capillary measured in m (meter). \nd_f: Film thickness of the capillary measured in m (meter).\nsp: The name of the stationary phase.\ngas: The name of the mobile phase. Allowed values: He, H2 or N2.\n\nExamples\n\njulia julia> System(10.0, 0.1e-3, 0.1e-6, \"DB5\", \"He\")\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Program","category":"page"},{"location":"functions/#GasChromatographySimulator.Program","page":"Functions","title":"GasChromatographySimulator.Program","text":"Program(time_steps, temp_steps, pin_steps, pout_steps, gf, a_gf, T_itp, pin_itp, pout_itp)\n\nStructure to describe the temperature and pressure program of a GC system. The function gf describes an optional thermal gradient.\n\nArguments\n\ntime_steps: Time steps in s (seconds). \ntemp_steps: Temperature steps in °C (degree celsius).\npin_steps: Inlet pressure steps in Pa(a) (pascal, absolute).\npout_steps: Outlet pressure steps in Pa(a) (pascal, absolute).\ngf: Gradient function gf(x, a_gf), describes the thermal gradient.\na_gf: Parameters of the gradient function.\nT_itp: Interpolated (linear) temperature T(x,t), constructed from time_steps, temp_steps and gf.\npin_itp: Interpolated (linear) inlet pressure pin(t), constructed from time_steps and pin_steps.\npout_itp: Interpolated (linear) outlet pressure pout(t), constructed from time_steps and pout_steps.  \n\nNote: The length of the arrays time_steps, temp_steps, pin_steps and a_gf have to be the same.\n\n\n\n\n\n","category":"type"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Program(time_steps::Array{<:Real, 1}, temp_steps::Array{<:Real, 1}, pin_steps::Array{<:Real, 1}, pout_steps::Array{<:Real, 1}, L)","category":"page"},{"location":"functions/#GasChromatographySimulator.Program-Tuple{Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Any}","page":"Functions","title":"GasChromatographySimulator.Program","text":"Program(timesteps::Array{<:Real, 1}, tempsteps::Array{<:Real, 1}, pinsteps::Array{<:Real, 1}, poutsteps::Array{<:Real, 1}, L)\n\nConstruct the structure Program with given values for the case without a thermal gradient. \n\nArguments\n\ntime_steps::Array{<:Real, 1}: Time steps in s (seconds). \ntemp_steps::Array{<:Real, 1}: Temperature steps in °C (degree celsius).\npin_steps::Array{<:Real, 1}: Inlet pressure steps in Pa(a) (pascal, absolute).\npout_steps::Array{<:Real, 1}: Outlet pressure steps in Pa(a) (pascal, absolute).\nL: Length of the capillary measured in m (meter).\n\nThe length of the arrays time_steps, temp_steps, pin_steps and pout_steps have to be the same.\n\nThe argument L is used to construct the temperature interpolation T_itp(x,t).\n\nExamples\n\njulia> Program([0.0, 60.0, 300.0, 120.0],\n        [40.0, 40.0, 320.0, 320.0],\n        300000.0.*ones(4),\n        zeros(4),\n        10.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Program(time_steps::Array{<:Real, 1}, temp_steps::Array{<:Real, 1}, pin_steps::Array{<:Real, 1}, pout_steps::Array{<:Real, 1}, a_gf::Array{<:Real, 2}, Tcontrol, L)","category":"page"},{"location":"functions/#GasChromatographySimulator.Program-Tuple{Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Matrix{<:Real}, Any, Any}","page":"Functions","title":"GasChromatographySimulator.Program","text":"Program(time_steps, temp_steps, pin_steps, pout_steps, a_gf, Tcontrol, L)\n\nConstruct the structure Program with given values. \n\nArguments\n\ntime_steps: Time steps in s (seconds). \ntemp_steps: Temperature steps in °C (degree celsius).\npin_steps: Inlet pressure steps in Pa(a) (pascal, absolute).\npout_steps: Outlet pressure steps in Pa(a) (pascal, absolute).\na_gf: Parameters of the gradient function.\nTcontrol: Option defining at which point of the column the temperature\n\nprogram is calculated. The options are inlet (x=0) and outlet (x=L).\n\nL: Length of the capillary measured in m (meter).\n\nThe length of the arrays time_steps, temp_steps, pin_steps, pout_steps and a_gf have to be the same.\n\nThe arguments Tcontrol and L are used to construct the thermal gradient function gf(x) and the temperature interpolation T_itp(x,t).\n\nExamples\n\njulia> Program([0.0, 60.0, 300.0, 120.0],\n        [40.0, 40.0, 320.0, 320.0],\n        300000.0.*ones(4),\n        zeros(4),\n        [[20.0, 20.0, 20.0, 20.0] zeros(4) 10.0.*ones(4) [0.0, -2.0, -5.0, -5.0]],\n        \"inlet\",\n        10.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Substance","category":"page"},{"location":"functions/#GasChromatographySimulator.Substance","page":"Functions","title":"GasChromatographySimulator.Substance","text":"Substance(name, CAS, Tchar, θchar, ΔCp, φ₀, ann, Dag, t₀, τ₀)\n\nStructure to describe the properties of a solute, which migrates through the GC system. These datas are in most cases read from a database with the function load_solute_database().\n\nArguments\n\nname: Name of the solute. \nCAS: CAS number of the solute.\nTchar: Characterisic temperature (in K). One of the three distribution-centric thermodynamic parameters describing the retention of this solute on the given stationary phase.\nθchar: Characterisic parameters (in °C). One of the three distribution-centric thermodynamic parameters describing the retention of this solute on the given stationary phase.\nΔCp: Change of the isobaric heat capacity moving from the mobile to the stationary phase (in J mol⁻¹ K⁻¹). One of the three distribution-centric thermodynamic parameters describing the retention of this solute on the given stationary phase.\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the thermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\nann: Annotations. In most cases the source of the data is noted here.\nDag: The diffusitivity of the solute a in the mobile phase g (in...). It is calculated by the function diffusitivity().\nt₀: Initial time of the solute (in s) at the start of the simulation.\nτ₀: Initial peak width of the solute (in s) at the start of the simulation. \n\nSee also: load_solute_database\n\n\n\n\n\n","category":"type"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Options","category":"page"},{"location":"functions/#GasChromatographySimulator.Options","page":"Functions","title":"GasChromatographySimulator.Options","text":"Options(alg, abstol, reltol, Tcontrol, odesys, ng)\n\nStructure describing some general options for the simulation. \n\nArguments\n\nalg: The algorithm used for the ODE solver. The algorithms OwrenZen3(), OwrenZen4() and OwrenZen5() are recommended.\nabstol: The absolute tolerance for the ODE solver. Recommended value 1e-6 to 1e-8.\nreltol: The relative tolerance for the ODE solver. Recommended value 1e-3 to 1e-5. \nTcontrol: Option defining at which point of the column the temperature program is calculated. The options are inlet (x=0) and outlet (x=L).\nodesys: Combine the ODEs for migration and peak-width into a system of ODEs (odesys = true) or solve the two ODEs separately (odesys = false).\nng: Option to calculate the simulation without a gradient (ng = true) or with a gradient (ng = false). This distinction is made because of partly manuall differentiation (problem of automatic differentiation with integrals, e.g. in the flow_restriction() function. -> TODO: test package Quadrature.jl as alternative to QuadGK.jl for integration)\n\nTODO: add option for the retention model ('ABC', 'K-centric')\n\nFor more informations about the arguments alg, abstol and reltol see the documentation of the DifferentialEquations.jl package.\n\n\n\n\n\n","category":"type"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.Parameters","category":"page"},{"location":"functions/#GasChromatographySimulator.Parameters","page":"Functions","title":"GasChromatographySimulator.Parameters","text":"Parameters(sys, prog, sub, opt)\n\nStructure describing all parameters for the simulation of a GC system. \n\nArguments\n\nsys: Structure Systems describing the parameters of the GC column and   mobile phase gas.\nprog: Structure Program describing the temperature and pressure   program of a GC system.\nsub: An array of the structure Substance describing the parameters of   the solutes which are separated in the GC simulation. \nopt: Structure Options describing additional option parameters.\n\n\n\n\n\n","category":"type"},{"location":"functions/#Helper","page":"Functions","title":"Helper","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.temperature_interpolation","category":"page"},{"location":"functions/#GasChromatographySimulator.temperature_interpolation","page":"Functions","title":"GasChromatographySimulator.temperature_interpolation","text":"temperature_interpolation(time_steps, temp_steps, gradient_function, L)\n\nConstruct the temperature function depending on position x and time t.  \n\nArguments\n\ntime_steps::Array{<:Real,1}: Time steps in s (seconds). \ntemp_steps::Array{<:Real,1}: Temperature steps in °C (degree celsius).\ngf::Function: Gradient function gf(x, a_gf), describes the thermal gradient.\nL::Float64: Length of the capillary measured in m (meter).\n\nFor the spatial dependency of the interpolated temperature T_ipt(x,t) the gradient function gf is calculated every 1e-3 m (1 mm). Positions inbetween are linear interpolated. For the temporal dependency the temperatures temp_steps defined at the time_steps are linear interpolated over time t.   \n\nExamples\n\njulia> T_itp = temperature_interpolation([0.0, 60.0, 300.0, 120.0], [40.0, 40.0, 320.0, 320.0], gf, 10.0)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.pressure_interpolation","category":"page"},{"location":"functions/#GasChromatographySimulator.pressure_interpolation","page":"Functions","title":"GasChromatographySimulator.pressure_interpolation","text":"pressure_interpolation(time_steps, press_steps)\n\nConstruct the pressure function depending on time t.  \n\nArguments\n\ntime_steps::Array{<:Real,1}: Time steps in s (seconds). \npress_steps::Array{<:Real,1}: Pressure steps in Pa (Pascal).\n\nThe pressure between the time_steps is linear interpolated between the corresponding values of press_steps  \n\nExamples\n\njulia> pin_itp = pressure_interpolation([0.0, 60.0, 300.0, 120.0], \n                                    [300000.0, 300000.0, 400000.0, 400000.0])\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.load_solute_database","category":"page"},{"location":"functions/#GasChromatographySimulator.load_solute_database","page":"Functions","title":"GasChromatographySimulator.load_solute_database","text":"load_solute_database(db, sp, gas, solutes, t₀, τ₀)\n\nLoad the data of solutes for the stationary phase sp and the mobile phase gas from the database db into an array of the structure Substance.\n\nArguments\n\ndb::DataFrame: DataFrame of the database. \nsp::String: Name of the stationary phase.\ngas::String: Name of the mobile phase.\nsolutes::Array{<:AbstractString,1}: Name of the solutes.\nt₀::Array{Float64,1}: Initial start times of the solutes.\nτ₀::Array{Float64,1}: Initial peak widths of the solutes. \n\nExamples\n\njulia> sub = load_solute_database(db, \"DB5\", \"He\", [\"C10\", \"C11\"], [0.0, 0.0], [0.5, 0.5])\n\n\n\n\n\nload_solute_database(db_path, db, sp, gas, solutes, t₀, τ₀)\n\nLoad the data of solutes for the stationary phase sp and the mobile phase gas from the database file db (located in db_path) into an array of the structure Substance. \n\nArguments\n\ndb_path::String: Path to the database file.\ndb::String: Name of the database file. \nsp::String: Name of the stationary phase.\ngas::String: Name of the mobile phase.\nsolutes::Array{<:AbstractString,1}: Name of the solutes.\nt₀::Array{Float64,1}: Initial start times of the solutes.\nτ₀::Array{Float64,1}: Initial peak widths of the solutes. \n\nExamples\n\njulia> sub = load_solute_database(\"path/to/the/file\", \"db.csv\", \"DB5\", \"He\", [\"C10\", \"C11\"], [0.0, 0.0], [0.5, 0.5])\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.all_solutes","category":"page"},{"location":"functions/#GasChromatographySimulator.all_solutes","page":"Functions","title":"GasChromatographySimulator.all_solutes","text":"all_solutes(sp, db)\n\nExtract the name of all solutes for which data in a database db and the stationay phase sp is available. \n\nArguments\n\nsp: Name of the stationary phase.\ndb: DataFrame of the database.\n\nExamples\n\njulia> all = all_solutes(\"DB5\", db)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.diffusivity","category":"page"},{"location":"functions/#GasChromatographySimulator.diffusivity","page":"Functions","title":"GasChromatographySimulator.diffusivity","text":"diffusivity(M, Cn, Hn, On, Nn, Rn, gas)\n\nCalculate the diffusivity Dag of solute a in gas g using the emperical Fuller-Schettler-Giddings model [1].\n\n[1] Fuller, Edward N.; Ensley, Keith; Giddings, J. Calvin, Diffusion of Halogenated Hydrocarbons in Helium. The Effect of Structure on Collision Cross Sections, The Journal of Physical Chemistry, Volume 73, Issue 11, 1969, 3679–3685\n\nArguments\n\nM: Molar mass of the solute.\nCn: Number of carbon atoms of the solute.\nHn: Number of hydrogen atoms of the solute.\nOn: Number of oxygen atoms of the solute.\nNn: Number of nitrogen atoms of the solute.\nRn: Number of closed rings of the structure of the solute.\ngas: The name of the mobile phase. Allowed values: He, H2 or N2.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Physical-Model","page":"Functions","title":"Physical Model","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.pressure","category":"page"},{"location":"functions/#GasChromatographySimulator.pressure","page":"Functions","title":"GasChromatographySimulator.pressure","text":"pressure(x, t, T_itp, pin_itp, pout_itp, L, d, gas; ng=false)\n\nCalculate the pressure at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m. Can be a function of position x.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)\n\nor with a gradient (ng = false, eq. 1).\n\np(xt) = sqrt(p_in(t)^2-fracκ(xt)κ_L(t)left(p_in^2-p_out^2right)) Eq. 1\n\np(xt) = sqrt(p_in(t)^2-fracxLleft(p_in^2-p_out^2right)) Eq. 2\n\nwith κ(xt) the flow restriction up to position x at time t and κ_L(t) = κ(x=Lt) the flow restriction of the whole column at time t.\n\nSee also: flow_restriction\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.flow_restriction","category":"page"},{"location":"functions/#GasChromatographySimulator.flow_restriction","page":"Functions","title":"GasChromatographySimulator.flow_restriction","text":"flow_restriction(x, t, T_itp, d, gas; ng=false)\n\nCalculate the flow restriction κ up to position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nd: Diameter of the GC column, in m. Can be a function of position x.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)\n\nor with a gradient (ng = false, eq. 1).\n\nκ(xt) = int_0^x fracη(yt) T(yt)d(y)^4dy Eq. 1\n\nκ(xt) = fracη(t) T(t) xd^4 Eq. 2\n\nwith η(xt) the viscosity of the mobile phase gas.\n\nSee also: viscosity\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.viscosity","category":"page"},{"location":"functions/#GasChromatographySimulator.viscosity","page":"Functions","title":"GasChromatographySimulator.viscosity","text":"viscosity(x, t, T_itp, gas)\n\nCalculate the (dynamic) viscosity of the mobile phase gas at position x at time t in Pa s.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\ngas: Name of the mobile phase gas.\n\nη(xt) = η_stleft(fracT(xt)T_stright)^(ξ_0 + ξ_1 fracT(xt)-T_stT_st) \n\nwith η_st, ξ_0 and ξ_1 parameters dependent on the mobile phase gas [1].\n\n[1] Blumberg, Leonid M., Temperature-Programmed Gas Chromatography, Wiley-VCH, 2010.\n\n\n\n\n\nviscosity(T, gas)\n\nCalculate the (dynamic) viscosity of the mobile phase gas at temperature T in Pa s.\n\nArguments\n\nT: Temperature in K.\ngas: Name of the mobile phase gas.\n\nη(xt) = η_stleft(fracT)T_st ight)^(ξ_0 + ξ_1 fracT-T_stT_st) \n\nwith η_st, ξ_0 and ξ_1 parameters dependent on the mobile phase gas [1].\n\n[1] Blumberg, Leonid M., Temperature-Programmed Gas Chromatography, Wiley-VCH, 2010.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.holdup_time","category":"page"},{"location":"functions/#GasChromatographySimulator.holdup_time","page":"Functions","title":"GasChromatographySimulator.holdup_time","text":"holdup_time(T, pin, pout, L, d, gas)\n\nCalculate the hold-up time in s without a gradient.\n\nArguments\n\nT: Temperature in K.\npin: Inlet pressure in Pa(a).\npout: Outlet pressure in Pa(g).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\n\nt_M = frac1283fracL^2d^2ηfracp_in^3-p_out^3(p_in^2-p_out^2)^2\n\n\n\n\n\nholdup_time(t, T_itp, pin_itp, pout_itp, L, d, gas; ng=false)\n\nCalculate the hold-up time in s at time t with a gradient.\n\nArguments\n\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)\n\nor with a gradient (ng = false, eq. 1).\n\nt_M(t) = 64fracκ_L(t)p_in(t)^2-p_out(t)^2 int_0^L d(y)^2fracp(yt)T(yt)dy Eq. 1\n\nt_M(t) = frac1283fracL^2d^2η(t)fracp_in(t)^3-p_out(t)^3(p_in(t)^2-p_out(t)^2)^2 Eq. 2\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.flow","category":"page"},{"location":"functions/#GasChromatographySimulator.flow","page":"Functions","title":"GasChromatographySimulator.flow","text":"flow(T, pin, pout, L, d, gas)\n\nCalculate the normalized flow through the GC column in m³/s without a gradient.\n\nArguments\n\nT: Temperature in K.\npin: Inlet pressure in Pa(a).\npout: Outlet pressure in Pa(g).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\n\nF = fracπ256fracT_np_nfracd^4Lfracp_in^2-p_out^2η T\n\nwith T_n the normalized temperature (T_n=(25 + 27315)K), p_n the normalized pressure (p_n = 101300 Pa(a)) and η the viscosity the mobile phase gas at temperature T.\n\n\n\n\n\nflow(t, T_itp, pin_itp, pout_itp, L, d, gas; ng=false)\n\nCalculate the normalized flow through the GC column in m³/s at time t.\n\nArguments\n\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true,   eq. 2)\n\nor with a gradient (ng = false, eq. 1).\n\nF(t) = fracπ256fracT_np_nfracp_in(t)^2-p_out(t)^2κ_L(t) Eq. 1\n\nF(t) = fracπ256fracT_np_nfracd^4Lfracp_in(t)^2-p_out(t)^2η(t) T(t) Eq. 2\n\nwith T_n the normalized temperature (T_n=(25 + 27315)K), p_n the normalized pressure (p_n = 101300 Pa(a)), κ_L the flow restriction of the column and η the viscosity the mobile phase gas at temperature T.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.mobile_phase_residency","category":"page"},{"location":"functions/#GasChromatographySimulator.mobile_phase_residency","page":"Functions","title":"GasChromatographySimulator.mobile_phase_residency","text":"mobile_phase_residency(x, t, T_itp, pin_itp, pout_itp, L, d, gas; ng=false)\n\nCalculate the residency (the inverse velocity) of the mobile phase at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nr_M(xt) = 64 fracd^2 κ_LT(xt)fracp(xt)p_in^2-p_out^2\n\nwith T_n the normalized temperature (T_n=(25 + 27315)K), p_n the normalized pressure (p_n = 101300 Pa(a)), κ_L the flow restriction of the column and p(xt) the local pressure.\n\nSee also: pressure, flow_restriction\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.residency","category":"page"},{"location":"functions/#GasChromatographySimulator.residency","page":"Functions","title":"GasChromatographySimulator.residency","text":"residency(x, t, T_itp, pin_itp, pout_itp, L, d, df, gas, Tchar, θchar, ΔCp,  φ₀; ng=false)\n\nCalculate the residency (the inverse velocity) of the solute at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ndf: Film thickness of the GC column, in m.\ngas: Name of the mobile phase gas.\nTchar: Characteristic temperature of the solute, in K.\nθchar: Characteristic parameters of the solute, in °C.\nΔCp: Change of the isobaric heat capacity of the solute moving from the mobile to the\n\nstationary phase, in J mol⁻¹ K⁻¹.\n\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the\n\nthermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\n\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nr(xt) = r_M(xt) left(1+k(xt)right)\n\nwith r_M the residency of the mobile phase and k(xt) the retention factor of the solute on the stationary phase.\n\nSee also: mobile_phase_residency, retention_factor\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.retention_factor","category":"page"},{"location":"functions/#GasChromatographySimulator.retention_factor","page":"Functions","title":"GasChromatographySimulator.retention_factor","text":"retention_factor(x, t, T_itp, d, df, Tchar, θchar, ΔCp, φ₀)\n\nCalculate the retention factor of the solute in the stationary phase at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\nd: Diameter of the GC column, in m.\ndf: Film thickness of the GC column, in m.\nTchar: Characteristic temperature of the solute, in K.\nθchar: Characteristic parameters of the solute, in °C.\nΔCp: Change of the isobaric heat capacity of the solute moving from the mobile to the\n\nstationary phase, in J mol⁻¹ K⁻¹.\n\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the\n\nthermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\n\nk(xt) = fracφφ₀ expleft((fracΔC_pR+fracT_charθ_char)(fracT_charT+-1)     fracΔC_pRln(fracTT_char)right)\n\nwith R the molar gas constant and φ the dimensionless film thickness of the simulated GC system (φ = d_fd).\n\nTODO: add option for the retention model ('ABC', 'K-centric')\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plate_height","category":"page"},{"location":"functions/#GasChromatographySimulator.plate_height","page":"Functions","title":"GasChromatographySimulator.plate_height","text":"plate_height(x, t, T_itp, pin_itp, pout_itp, L, d, df, gas, Tchar, θchar, ΔCp, φ₀, Dag; ng=false)\n\nCalculate the plate height of the solute at position x at time t according to the Golay equation.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ndf: Film thickness of the GC column, in m.\ngas: Name of the mobile phase gas.\nTchar: Characteristic temperature of the solute, in K.\nθchar: Characteristic parameters of the solute, in °C.\nΔCp: Change of the isobaric heat capacity of the solute moving from the mobile to the\n\nstationary phase, in J mol⁻¹ K⁻¹.\n\nφ₀: Dimensionless film thickness (φ ≈ df/d) of the column for which the\n\nthermodynamic parameters (Tchar, θchar, ΔCp) were estimated.\n\nDag: diffusivity of solute a in gas g.\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nH(xt) = 2 fracD_Mu_M + fracd^296left(6 μ^2-16 μ +11 right) fracu_MD_M + frac23 d_f^2 μ(1-μ) fracu_MD_S\n\nwith D_M the diffusion coefficient of the solute in the mobile phase, D_S the diffusion coefficient of the solute in the stationary phase, u_M the velocity of the mobile phase and μ the mobility of the solute.\n\nD_S is correlated to D_M by: \n\nD_S = fracD_M10000\n\nTODO: alternative correlations?\n\nu_M is realated to the residency of the mobile phase r_M:\n\nu_M = frac1r_M\n\nμ is correlated to the retention factor k:\n\nμ = frac11 + k\n\nSee also: diffusion_mobile, mobile_phase_residency, retention_factor\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.diffusion_mobile","category":"page"},{"location":"functions/#GasChromatographySimulator.diffusion_mobile","page":"Functions","title":"GasChromatographySimulator.diffusion_mobile","text":"diffusion_mobile(x, t, T_itp, pin_itp, pout_itp, L, d, gas, Dag; ng=false)\n\nCalculate the diffusion coefficient of the solute in the mobile phase at position x at time t.\n\nArguments\n\nx: Position along the GC column, in m.\nt: Time in s.\nT_itp: Interpolated (linear) temperature T(x,t).\npin_itp: Interpolated (linear) inlet pressure pin(t).\npout_itp: Interpolated (linear) outlet pressure pout(t).\nL: Length of the capillary measured in m (meter).\nd: Diameter of the GC column, in m.\ngas: Name of the mobile phase gas.\nDag: diffusivity of solute a in gas g.\nng: Option to calculate the simulation without a gradient (ng = true)\n\nor with a gradient (ng = false).\n\nD_M(xt) = D_ag fracT(xt)^175p(xt)\n\n\n\n\n\n","category":"function"},{"location":"functions/#Solving","page":"Functions","title":"Solving","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.simulate","category":"page"},{"location":"functions/#GasChromatographySimulator.simulate","page":"Functions","title":"GasChromatographySimulator.simulate","text":"simulate(par::Parameters)\n\nSimulate the GC system defined by the structure par.\n\nNote: Based on the option for odesys the result is different. For odesys = true the result is a dataframe (the peaklist) and the solution of the ODEs as a system (solution structure from DifferentialEquations.jl). If odesys = false the result is a dataframe (the peaklist) and the two solutions of the ODEs for time t(z) and peak variance τ²(z).\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solve_system_multithreads","category":"page"},{"location":"functions/#GasChromatographySimulator.solve_system_multithreads","page":"Functions","title":"GasChromatographySimulator.solve_system_multithreads","text":"solve_system_multithreads(par::Parameters)\n\nSimulate the GC system defined by the structure par by solving the ODEs for t(z) and τ²(z) together as a system of ODEs using multiple threads (parallel computing) for the simulation of different solutes. \n\nNote: The result is an array of the solution structure from DifferentialEquations.jl.\n\nExamples\n\njulia> sol = solve_system_multithreads(par)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solve_multithreads","category":"page"},{"location":"functions/#GasChromatographySimulator.solve_multithreads","page":"Functions","title":"GasChromatographySimulator.solve_multithreads","text":"solve_multithreads(par::Parameters)\n\nSimulate the GC system defined by the structure par by solving the ODEs for t(z) and τ²(z) separatly (solving t(z) and using this result to solve for τ²(z)) using multiple threads (parallel computing) for the simulation of different solutes.\n\nNote: The result are two arrays of the solution structure from DifferentialEquations.jl.\n\nExamples\n\njulia> sol, peak = solve_multithreads(par)\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solving_migration","category":"page"},{"location":"functions/#GasChromatographySimulator.solving_migration","page":"Functions","title":"GasChromatographySimulator.solving_migration","text":"solving_migration(sys::System, prog::Program, sub::Substance, opt::Options)\n\nSolve for the migration t(z) of solute sub in the GC system sys with the program prog and the options opt.\n\nNote: The result is the solution structure from DifferentialEquations.jl.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solving_peakvariance","category":"page"},{"location":"functions/#GasChromatographySimulator.solving_peakvariance","page":"Functions","title":"GasChromatographySimulator.solving_peakvariance","text":"solving_peakvariance(solution_tz, sys::System, prog::Program, sub::Substance, opt::Options)\n\nSolve for the development of the peak variance τ²(z) of solute sub in the GC system sys with the program prog and the options opt during its migration defined by solution_tz.\n\nNote: The result is the solution structure from DifferentialEquations.jl.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.solving_odesystem_r","category":"page"},{"location":"functions/#GasChromatographySimulator.solving_odesystem_r","page":"Functions","title":"GasChromatographySimulator.solving_odesystem_r","text":"solving_odesystem_r(sys::System, prog::Program, sub::Substance, opt::Options)\n\nSolve the migration t(z) and peak variance development τ²(z) of solute sub in the GC system sys with the program prog and the options opt as a system of ODEs.\n\nNote: The result is the solution structure from DifferentialEquations.jl.\n\nSee also: odesystem_r!\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.odesystem_r!","category":"page"},{"location":"functions/#GasChromatographySimulator.odesystem_r!","page":"Functions","title":"GasChromatographySimulator.odesystem_r!","text":"odesystem_r!(dt, t, p, z)\n\nThe ODE system for migration t(z) and peak variance development τ²(z).\n\nfracdtdz = r(z t(z))\n\nfracdτ^2dz = H(z t(z)) r(z t(z)) + 2 τ^2(z t(z)) fracrt(zt(z))\n\nSee also: solving_odesystem_r, peakode\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.peakode","category":"page"},{"location":"functions/#GasChromatographySimulator.peakode","page":"Functions","title":"GasChromatographySimulator.peakode","text":"peakode(z, t, τ², sys, prog, sub, opt)\n\nThe second ODE function for the ODE system describing the peak variance development τ²(z), using (in parts) automatic differentiation.\n\nfracdτ^2dz = H(z t(z)) r(z t(z)) + 2 τ^2(z t(z)) fracrt(zt(z))\n\nTODO: alternative to QuadGK.jl for integration which is available for ForwardDiff.jl \n\nSee also: solving_odesystem_r, odesystem_r!\n\n\n\n\n\n","category":"function"},{"location":"functions/#Results","page":"Functions","title":"Results","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.peaklist(sol, par)\n\nGasChromatographySimulator.peaklist(sol, peak, par)","category":"page"},{"location":"functions/#GasChromatographySimulator.peaklist-Tuple{Any, Any}","page":"Functions","title":"GasChromatographySimulator.peaklist","text":"peaklist(sol, par)\n\nConstruct a DataFrame with the peak list of the solution sol of the simulation of the GC system defined by par. \n\nOutput\n\nThe peaklist DataFrame consists of the entrys: \n\nName: Name of the solute.\ntR: Retention time of the solute (in s).\nτR: Peak width of the solute (in s). \nTR: Temperature of the end of the column at the retention time (in °C).\nσR: Band width of the solute at retention time (in m).\nuR: Solute velocity at retention time (in m/s).\nkR: Retention factor of the solute at retention time.\n\nExamples\n\njulia> pl = peaklist(sol, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"functions/#GasChromatographySimulator.peaklist-Tuple{Any, Any, Any}","page":"Functions","title":"GasChromatographySimulator.peaklist","text":"peaklist(sol, peak, par)\n\nConstruct a DataFrame with the peak list of the solution sol and peak of the simulation of the GC system defined by par. \n\nOutput\n\nThe peaklist DataFrame consists of the entrys: \n\nName: Name of the solute.\ntR: Retention time of the solute (in s).\nτR: Peak width of the solute (in s). \nTR: Temperature of the end of the column at the retention time (in °C).\nσR: Band width of the solute at retention time (in m).\nuR: Solute velocity at retention time (in m/s).\nkR: Retention factor of the solute at retention time.\n\nExamples\n\njulia> pl = peaklist(sol, peak, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.sol_extraction(sol, par)","category":"page"},{"location":"functions/#GasChromatographySimulator.sol_extraction-Tuple{Any, Any}","page":"Functions","title":"GasChromatographySimulator.sol_extraction","text":"sol_extraction(sol, par)\n\nExtract the points z=t, t=u1, τ²=u2 from the solution sol of the ODE system of the GC system defined by par and exports them in a DataFrame.\n\nExamples\n\ndf_sol = sol_extraction(sol, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.sol_extraction(sol, peak, par)","category":"page"},{"location":"functions/#GasChromatographySimulator.sol_extraction-Tuple{Any, Any, Any}","page":"Functions","title":"GasChromatographySimulator.sol_extraction","text":"sol_extraction(sol, peak, par)\n\nExtract the points zt=sol.t, t=sol.u, zτ²=peak.t and τ²=peak.u from the solution sol and peak of the ODEs of the GC system defined by par and exports them in a DataFrame.\n\nExamples\n\ndf_sol = sol_extraction(sol, peak, par)\n...\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plot_chromatogram","category":"page"},{"location":"functions/#GasChromatographySimulator.plot_chromatogram","page":"Functions","title":"GasChromatographySimulator.plot_chromatogram","text":"plot_chromatogram(peaklist, tlims; annotation=true, number=true, mirror=false, offset=0.0)\n\nPlot the chromatogram of the peaks listed in peaklist over the time tupel tlims = (t_start, t_end). \n\nArguments\n\npeaklist: DataFrame with the names, retention times and peak widths of the simulated substances.\ntlims: Tuple defining the start and end time of the plotted chromatogram.\nannotation: Boolean, switching the annotation of the peaks on/off; default = true.\nnumber: Boolean, switching the type of the annotation between number of the substance in the peaklist (number = true) or name of the substance (number = false); default = true.\nmirror: Boolean, if mirror = true the chromatogram is multiplied by -1; default = false.\noffset: Float64, this value is added to the chromatogram; default = 0.0.\n\nOutput\n\nTupel (p_chrom, t, chrom)\n\np_chrom: the plot of the chromatogram chrom over time t\nt: Array of time of the chromatogram\nchrom: Array of the abundance values of the chromatogram\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plot_chromatogram!","category":"page"},{"location":"functions/#GasChromatographySimulator.plot_chromatogram!","page":"Functions","title":"GasChromatographySimulator.plot_chromatogram!","text":"plot_chromatogram!(p_chrom, peaklist, tlims; annotation=true, number=true, mirror=false, offset=0.0)\n\nAdd the chromatogram of the peaks listed in peaklist over the time tupel tlims = (t_start, t_end) to the plot p_chrom. \n\nArguments\n\np_chrom: Plot of an existing chromatogram.\npeaklist: DataFrame with the names, retention times and peak widths of the simulated substances.\ntlims: Tuple defining the start and end time of the plotted chromatogram.\nannotation: Boolean, switching the annotation of the peaks on/off; default = true.\nnumber: Boolean, switching the type of the annotation between number of the substance in the peaklist (number = true) or name of the substance (number = false); default = true.\nmirror: Boolean, if mirror = true the chromatogram is multiplied by -1; default = false.\noffset: Float64, this value is added to the chromatogram; default = 0.0.\n\nOutput\n\nTupel (t, chrom)\n\nt: Array of time of the chromatogram\nchrom: Array of the abundance values of the chromatogram\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plot_flow","category":"page"},{"location":"functions/#GasChromatographySimulator.plot_flow","page":"Functions","title":"GasChromatographySimulator.plot_flow","text":"plot_flow(par)\n\nCalculate and plot the flow (in mL/min, normalized) of the carrier gas in a GC system with a program defined in the parameters par::GasChromatography.Parameters.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plot_pressure","category":"page"},{"location":"functions/#GasChromatographySimulator.plot_pressure","page":"Functions","title":"GasChromatographySimulator.plot_pressure","text":"plot_pressure(prog)\n\nPlot the inlet and outlet pressure over time of the program prog::GasChromatographySimulator.Program.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"GasChromatographySimulator.plot_temperature","category":"page"},{"location":"functions/#GasChromatographySimulator.plot_temperature","page":"Functions","title":"GasChromatographySimulator.plot_temperature","text":"plot_temperature(par; selector=\"T(t)\")\n\nPlot the temperature program of the GC system. \n\nArguments\n\npar::GasChromatographySimulator.Parameters: parameters of the GC system\nselector::String: selection of the plot as:\n\n* `selector = \"T(t)\"`: 2D-plot of temperature `T` over time `t` at inlet (`x=0`) and outlet (`x=L`)\n* `selector = \"T(x)\"`: 2D-plot of temperature `T` over column position `x` at the `time_steps` of the program\n* `selector = \"T(x,t)\"`: 3D-plot of temperature `T` over column position `x` and `t`\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"[1] Rackauckas, Christopher and Nie, Qing. Differentialequations.jl - a performant and feature-rich ecosystem for solving differential equations in julia. Journal of Open Research Software (2017). DOI: http://doi.org/10.5334/jors.151, https://github.com/SciML/DifferentialEquations.jl","category":"page"},{"location":"references/","page":"References","title":"References","text":"[2] Interpolations.jl","category":"page"},{"location":"references/","page":"References","title":"References","text":"[3] Johnson, Steven G. QuadGK.jl: Gauss-Kronrod integration in Julia. https://github.com/JuliaMath/QuadGK.jl","category":"page"},{"location":"references/","page":"References","title":"References","text":"[4] Revels, J.; Lubin, M. and Papamarkou, T. Forward-Mode Automatic Differentiation in Julia. arXiv:1607:07892 (2016). https://github.com/JuliaDiff/ForwardDiff.jl ","category":"page"},{"location":"references/","page":"References","title":"References","text":"[5] Pluto.jl https://github.com/fonsp/Pluto.jl","category":"page"},{"location":"references/","page":"References","title":"References","text":"[6] Blumberg, Leonid M. Distribution-centric 3-parameter thermodynamic models of partition gas chromatography. Journal of Chromatography A (2017). DOI: http://10.1016/j.chroma.2017.02.047","category":"page"},{"location":"references/","page":"References","title":"References","text":"[7] Blumberg, Leonid M. Temperature-Programmed Gas Chromatography. Wiley-VCH (2010).","category":"page"},{"location":"references/","page":"References","title":"References","text":"[8] Leppert, Jan; Müller, Peter J.; Chopra, Miriam D.; Blumberg, Leonid M. and Boeker, Peter. Simulation of spatial thermal gradient gas chromatography. Journal of Chromatography A (2020). DOI: http://10.1016/j.chroma.2020.460985","category":"page"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In the following section the general usage and setup of the simulation is explained. ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"A GC-system for the simulation is defined by four sets of parameters:","category":"page"},{"location":"usage/#GC-system-parameters","page":"Usage","title":"GC-system parameters","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"A GC-system is defined by the dimensions of the GC column, length L, diameter d and film thickness of the stationary phase df, all measured in meters, the name of the stationary phase and the name of the mobile phase (with the allowed values \"He\", \"H2\" and \"N2\").","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: GC-column)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"These values are collected in the type structure GasChromatographySimulator.System, which allows to define a function depending on column position x of the diameter d(x, a_d) and film thickness df(x, a_df), where a_d, resp. a_df are parameters of the function.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The following method constructs the System structure sys with a constant diameter and film thickness:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using GasChromatographySimulator # hide\nsys = GasChromatographySimulator.System(10.0, 0.25e-3, 0.25e-6, \"SPB50\", \"He\")\nnothing # hide","category":"page"},{"location":"usage/#Program-parameters","page":"Usage","title":"Program parameters","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The program for a GC separation is defined by a temperature program T(t) and a pressure program. Typically the inlet pressure is controlled over time p_in(t) and the outlet pressure is constant, but here the outlet pressure can also be a function of time p_out(t). In addition a thermal gradient can be applied, where the temperature of the GC column changes depending on position x on the column.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The program parameters are collected in the type structure GasChromatographySimulator.Program.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Different methods exist to construct the Program structure, depending on the usage of a thermal gradient. In two examples the definition of the program parameters will be explained.","category":"page"},{"location":"usage/#Without-thermal-gradient","page":"Usage","title":"Without thermal gradient","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Without a thermal gradient the temperature is the same at every column position at the same time. This is the normal case for conventional GC. One example of such a program can be achieved by the following method GasChromatographySimulator.Program(time_steps, temp_steps, pin_steps, pout_steps, L), which constructs the Program structure:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"prog = GasChromatographySimulator.Program(  [0.0, 60.0, 600.0, 120.0],\n                                            [40.0, 40.0, 300.0, 300.0],\n                                            [18.0, 18.0, 98.0, 98.0].*1000.0 .+ 101300.0,\n                                            101300.0.*ones(4),\n                                            sys.L)\nnothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The first array time_steps defines the time steps (in s), the second array temp_steps defines the temperatures (in °C) at these time steps, the third and fourth array (pin_steps and pout_steps) define the inlet and outlet pressures (both in Pa(absolute)) at the time steps. The values of temperature and pressures change linearly between the values defined at the time steps. The following picture shows the resulting temperature and pressure program:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: Program without thermal gradient)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The first time step is always zero (t₁ = 0.0 s) and the following time steps define the time that passes until the next step. In the example the second time step is t₂ = 60 seconds long and in this time the temperature stays constant at 40°C. With the next time step (t₃ = 600 s) the temperature changes from T₂ = 40°C linearly to T₃ = 300°C. In the last time step (t₄ = 120 s) the temperature is again kept constant at 300°C. The pressure program is defined in the same way. The inlet pressure changes similarly at the time steps, while the outlet pressure is constant.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The four arrays for time steps, temperatures and the two pressures must have the same number of elements, otherwise the construction of the Program structure gives an error message. Complex programs with several different heating ramps and temperature plateaus, as well as programed pressures, e.g. pressure pulses, can be realized by adding the temperature/pressure values at additional time steps. ","category":"page"},{"location":"usage/#Thermal-gradient","page":"Usage","title":"Thermal gradient","text":"","category":"section"},{"location":"usage/#Predefined-gradient-function","page":"Usage","title":"Predefined gradient function","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In the following text the expression temperature program means the change of the temperature with time t, while the expression temperature gradient means the change of the temperature with column position x.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In addition to a linear temperature and pressure program , a temperature gradient can be defined. Using the method GasChromatographySimulator.Program(time_steps, temp_steps, pin_steps, pout_steps, a_gf, Tcontrol, L) a pre-defined temperature function gf(x) is used to set the GC program.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"prog_g = GasChromatographySimulator.Program([0.0, 60.0, 150.0, 150.0, 120.0],\n                                            [40.0, 40.0, 170.0, 300.0, 300.0],\n                                            150000.0.*ones(5),\n                                            101300.0.*ones(5),\n                                            [[0.0, 0.0, 60.0, 60.0, 20.0] zeros(5) sys.L.*ones(5) [0.0, 0.0, -2.0, -5.0, -5.0]],\n                                            \"inlet\",\n                                            sys.L)\nnothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Similar to the setup before, the arrays time_steps, temp_steps, pin_steps and pout_steps are used. Added are the the array a_gf, containing the parameters for the temperature function gf(x) and the option Tcontrol (with options \"inlet\" and \"outlet\"), which defines at which position of the column the temperature program is defined (Tcontrol = \"inlet\" ... temperature program defined at x=0; Tcontrol=\"outlet\" ... temperature program defined at x=L). The following picture shows the resulting temperature program at the column inlet and outlet:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: Program with thermal gradient)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The parameters of the pre-defined gradient function gf(x) consists of four arrays with the same length as the array time_steps. These four arrays represent four different parameters:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"ΔT ... the temperature difference between x = x₀ and x = x₀ + L₀\nx₀ ... the start position, typically x₀ = 0.0\nL₀ ... the distance from the start position, typically L₀ = L\nα ... the gradient profile factor","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The form of the gradient function can change over time. For every parameter the same number of values as the number of time_steps are defined and different gradient functions at the different time_steps are defined. For times between the time_steps the gradient function at a fixed position changes linearly in time between the values at the surrounding time_steps. ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The pre-defined gradient function distinguishes two cases for the gradient profile factor. For α<=0 it is defined as","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"gf(x) = ΔT  left( 1 - expleft(α left( 1 - fracx - x_0L_0right)right) + left(1 - fracx - x_0L_0right) exp(α)right)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"For α>0 it is defined as","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"gf(x) = ΔT  left(expleft(-α fracx - x_0L_0right) - fracx - x_0L_0exp(-α)right)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The following graph shows different gradient functions for different profile factors α (ΔT = 50°C, x₀ = 0.0m and L₀ = 10.0m). ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: Temperature gradient with different profile factors)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"For α=0 a linear change of the temperature along the column is achieved. For negative α-values the gradient has a concave profile, with small changes of the temperature near the inlet and great changes towards the outlet. For positive α-values the gradient has a convex profile, with great changes near the inlet and small changes towards the outlet.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"From the parameters time_steps, temp_steps, a_gf and gradient function gf(x) the temperature at every position x and every time t is linearly interpolated in a function T_itp(x,t), which is stored in the GasChromatographySimulator.Program structure. The parameters time_steps and pin_steps, resp. pout_steps, are used to construct the linear interpolated pressure function in time pin_itp(t), resp. pout_itp(t). These interpolated functions are used throughout the simulation.","category":"page"},{"location":"usage/#Substance-parameters","page":"Usage","title":"Substance parameters","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"A third set of parameters, GasChromatographySimulator.Substance, is used to store the informations about the substances which are separated in the simulated GC-run. The stored information are the name, the CAS-number, three thermodynamic parameters (Tchar θchar ΔCp, see also 6), the dimensionless film thickness (df/d) of the system for which the thermodynamic parameters were estimated, the diffusivity (calculated from the molecular formula, number of rings in the molecule and mol mass), the injection time and initial peak width. For several substances an array of the type GasChromatographySimulator.Substance is used.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"With the function GasChromatographySimulator.load_solute_database the data for selected substances and a selected stationary phase is loaded from an external database (a .csv-file).","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"stat_phase = sys.sp\nsolutes = [\"C10\", \"C11\", \"C12\", \"2-Octanol\", \"2-Octanone\"]\nt₀ = zeros(length(solutes))\nτ₀ = zeros(length(solutes))\nsub = GasChromatographySimulator.load_solute_database(\"../../data\", \"Database_test.csv\", \n                                                        stat_phase,\n                                                        sys.gas,\n                                                        solutes,\n                                                        t₀,\n                                                        τ₀)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"An example database Database_test.csv with thermodynamic data from [Blumberg2017a] can be found in the folder /data of this github project, see also Database.","category":"page"},{"location":"usage/#Option-parameters","page":"Usage","title":"Option parameters","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"A fourth set of parameters, GasChromatographySimulator.Options, holds additional options used in the simulation. For details see the docstring.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The default options can be initialized by calling:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"opt = GasChromatographySimulator.Options()","category":"page"},{"location":"usage/#Combining-the-parameters","page":"Usage","title":"Combining the parameters","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The four sets of parameters defining the simulation are collected in the type structure GasChromatographySimulator.Parameters. All information for the simulation are contained in this structure.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"par_g = GasChromatographySimulator.Parameters(sys, prog_g, sub, opt) \nnothing # hide","category":"page"},{"location":"usage/#Run-the-simulation-and-evaluate-the-results","page":"Usage","title":"Run the simulation and evaluate the results","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The GC-system is simulated by numerically solving two ordinary differential equations (ODE):","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The first ODE describes the migration t(x) of a substance through the GC column with the velocity u(xt):","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"fracdtdx = frac1u(xt)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The second ODE describes the development of the temporal peak variance tau^2(xt(x)) during the migration:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"fracdτ^2dx = H(x t(x)) r(x t(x)) + 2 τ^2(x t(x)) fracrt(xt(x))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Hereby is r(xt) the inverse velocity of the substance (1u(xt), also called residency) and H(xt) is the local plate height. For more information about the physical model see the [docstrings of the physical model]((https://janleppert.github.io/GasChromatographySimulator.jl/dev/functions/#Physical-Model) and the references 7 and 8.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"With the argument odesys of GasChromatographySimulator.Options the two differential equations can be solved as a system of ODEs (odesys = true) or separately, using the solution of the first ODE to solve the second ODE (odesys = false).   ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"With the function GasChromatographySimulator.simulate the simulation is initiated.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"An example of the above defined GC-system sys, with a temperature gradient program prog_g, the five substances sub and the default options opt (collected in the parameters par_g) is simulated by ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"peaklist, sol = GasChromatographySimulator.simulate(par_g)\nnothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The simulation gives two resulting quantities. In the peaklist the general results of the simulated GC-run are presented in a DataFrame:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"peaklist # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Name          ... name of the substance\ntR            ... retention time in s\nτR            ... peak width at retention time in s\nTR            ... elution temperature (temperature of the column outlet at retention time) \nσR            ... band width at retention time in m\nuR            ... velocity of the substance at retention time in m/s\nkR            ... retention factor at retention time\nRes           ... resolution between the substance and its following neighbor","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"From the peaklist a chromatogram can be calculated (gaussian peak form with the same area are assumed) and plotted:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Plots; gr() # hide\np_chrom, t, abundance = GasChromatographySimulator.plot_chromatogram(peaklist, (100.0, 200.0))\nsavefig(p_chrom, \"plot_chromatogram.png\"); nothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: )","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The solution of the ODEs are stored in sol as an array of solutions from the DifferentialEquations.jl package. The solution for the first substance (C10) is:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"sol[1] # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Herby is sol[1].t the position x along the column and sol[1].u consists of an array of the corresponding time t and peak variance τ².","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The solution t(x) can be plotted by","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"p_tx = plot(sol[1], vars=1)\nsavefig(p_tx, \"plot_tx.png\"); nothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: )","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The solution τ²(x) can be plotted by","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"p_τ²x = plot(sol[1], vars=2)\nsavefig(p_τ²x, \"plot_tau2x.png\"); nothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: )","category":"page"},{"location":"usage/#Notes","page":"Usage","title":"Notes","text":"","category":"section"},{"location":"usage/#Self-defined-gradient-function","page":"Usage","title":"Self-defined gradient function","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"It is possible to define other gradient function beside the pre-defined function above. The following example shows the construction of the GasChromatographySimulator.Program structure with a sin function with a changing period over the time of the program:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"L = 10.0\ntime_steps = [0.0, 60.0, 150.0, 150.0, 120.0]\ntemp_steps = [40.0, 60.0, 170.0, 300.0, 350.0]\npin_steps = 150000.0.*ones(length(time_steps))\npout_steps = zeros(length(time_steps))\na_gf = [[10.0, 10.0, 30.0, 30.0, 10.0] [1.0, 1.0, 1.0, 2.0, 4.0]]\ngradient_function(x) = a_gf[:,1].*sin.(a_gf[:,2].*2*π/L*x)\nT_itp = GasChromatographySimulator.temperature_interpolation(time_steps, temp_steps, gradient_function, L)\npin_itp = GasChromatographySimulator.pressure_interpolation(time_steps, pin_steps)\npout_itp = GasChromatographySimulator.pressure_interpolation(time_steps, pout_steps)\nprog = GasChromatographySimulator.Program(time_steps, temp_steps, pin_steps, pout_steps, gradient_function, a_gf, T_itp, pin_itp, pout_itp)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"This program results in the following gradient.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: self-defined thermal gradient)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The solid lines show the defined gradient functions at the five time_steps. The two dashed lines show the gradient at two different times between the third and fourth time_steps. They show the transition between the two defined functions.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Note: Not fully tested yet.","category":"page"},{"location":"usage/#Database","page":"Usage","title":"Database","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The layout of the database in the .csv-file is shown here:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using DataFrames, CSV # hide\ndb = DataFrame(CSV.File(\"../../data/Database_test.csv\", header=1, silencewarnings=true, limit=3))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"It consists of 14 different columns:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Name          ... name of the substance\nCAS           ... CAS number for unique identification of the substance\nCnumber       ... number of carbon atoms in the substance molecule\nHnumber       ... number of hydrogen atoms in the substance molecule\nOnumber       ... number of oxygen atoms in the substance molecule\nNnumber       ... number of nitrogen atoms in the substance molecule\nRingnumber    ... number of ring structures in the substance molecule\nMolmass       ... molar mass of the substance molecule\nPhase         ... name of the stationary phase which corresponds to the thermodynamic parameters\nTchar         ... the first thermodynamic parameter in °C\nthetachar     ... the second thermodynamic parameter in °C\nDeltaCp       ... the third thermodynamic parameter in J mol⁻¹ K⁻¹\nphi0          ... the dimensionless film thickness (df/d) for which the thermodynamic parameters were estimated\nAnnotation    ... a note, e.g. reference for the thermodynamic parameters","category":"page"},{"location":"examples/#Pluto-Notebook","page":"Pluto Notebook","title":"Pluto Notebook","text":"","category":"section"},{"location":"examples/","page":"Pluto Notebook","title":"Pluto Notebook","text":"An interactive Pluto notebook with a simple example is available. The parameters can be changed and a small selection of solutes can be simulated for three different stationary phases.","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"To use GasChromatographicSimulator.jl, you need to install Julia 1.6 or greater first (official Julia website) and than add the (unregistered) package:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> ] add https://github.com/JanLeppert/GasChromatographySimulator.jl","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"To use the package type:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> using GasChromatographySimulator","category":"page"},{"location":"#GasChromatographySimulator.jl-Documentation","page":"Home","title":"GasChromatographySimulator.jl Documentation","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package GasChromatographySimulator.jl simulates the separation of different substances (solutes) in a gas chromatographic (GC) system. The simulation uses ordinary differential equations (ODE) to model the migration t(z) of a solute through the GC system and the development of the peak variance during this migration τ²(z).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Beside a temperature program (change of the temperature of the GC-system with time) and a pressure program (change of inlet and/or outlet pressure with time), a thermal gradient (change of the temperature along the GC column) can be added. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The interaction between the substances and the stationary phase of the GC-system is described by a thermodynamic model (K-centric thermodynamic parameters [Blumberg.2017])","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Chromatogram)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For further details see [Leppert.2020a].","category":"page"},{"location":"","page":"Home","title":"Home","text":"The simulation uses the following packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"DifferentialEquations.jl\nInterpolations.jl\nQuadGK.jl\nForwardDiff.jl\nPluto.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"The manual is structured as followed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"installation.md\",\n    \"usage.md\",\n    \"functions.md\",\n    \"references.md\"\n    ]\nDepth = 2","category":"page"}]
}
